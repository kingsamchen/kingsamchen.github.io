<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KC的废墟堆</title>
  
  <subtitle>Will you serve in Heaven, or rule in Hell</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kingsamchen.github.io/"/>
  <updated>2018-10-13T14:27:57.589Z</updated>
  <id>http://kingsamchen.github.io/</id>
  
  <author>
    <name>Kingsley Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Naming a Native Thread</title>
    <link href="http://kingsamchen.github.io/2018/10/13/naming-a-native-thread/"/>
    <id>http://kingsamchen.github.io/2018/10/13/naming-a-native-thread/</id>
    <published>2018-10-13T13:58:06.000Z</published>
    <updated>2018-10-13T14:27:57.589Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这里所说的 naming 主要是为了能够被 debugger 识别，所以单纯的通过 TLS 存储一个额外的字符串是不够的。&lt;/p&gt;
&lt;h2 id=&quot;Windows&quot;&gt;&lt;a href=&quot;#Windows&quot; class=&quot;headerlink&quot; title=&quot;Windows&quot;&gt;&lt;/a&gt;Windows&lt;/h2&gt;&lt;p&gt;Windows 上的做法有两种。&lt;/p&gt;
&lt;p&gt;第一种是利用现成的 API &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-setthreaddescription&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SetThreadDescription()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过这个 API 设置的名字据说新版的 minidump 和 WinDBG 都能认了。&lt;/p&gt;
&lt;p&gt;不过缺点是这个 API 很新，从 Windows 10 1607 (build 14393) 开始才有，所以稳妥的使用方式还是从 kernel32.dll 里动态获取。&lt;/p&gt;
&lt;p&gt;第二种做法比较传统，而且很不直观，来源是 MSDN 的一篇 &lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/debugger/how-to-set-a-thread-name-in-native-code?view=vs-2017&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;doc&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DWORD kVCThreadNameException = &lt;span class=&quot;number&quot;&gt;0x406D1388&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tagTHREADNAME_INFO&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DWORD dwType;  &lt;span class=&quot;comment&quot;&gt;// Must be 0x1000.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LPCSTR szName;  &lt;span class=&quot;comment&quot;&gt;// Pointer to name (in user addr space).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DWORD dwThreadID;  &lt;span class=&quot;comment&quot;&gt;// Thread ID (-1=caller thread).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DWORD dwFlags;  &lt;span class=&quot;comment&quot;&gt;// Reserved for future use, must be zero.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; THREADNAME_INFO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SetThreadName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    THREADNAME_INFO info;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    info.dwType = &lt;span class=&quot;number&quot;&gt;0x1000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    info.szName = &lt;span class=&quot;string&quot;&gt;&quot;Worker-Traditional&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    info.dwThreadID = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    info.dwFlags = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RaiseException(kVCThreadNameException, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(info) / &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(DWORD),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;keyword&quot;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;ULONG_PTR*&amp;gt;(&amp;amp;info));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; __except(EXCEPTION_EXECUTE_HANDLER) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;基本上照搬 doc 上的代码就好了。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="Windows" scheme="http://kingsamchen.github.io/tags/Windows/"/>
    
      <category term="Linux" scheme="http://kingsamchen.github.io/tags/Linux/"/>
    
      <category term="thread" scheme="http://kingsamchen.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>Using Boolean Switch with Python Argparser the Right Way</title>
    <link href="http://kingsamchen.github.io/2018/10/07/python-argparser-bool-arg-the-right-way/"/>
    <id>http://kingsamchen.github.io/2018/10/07/python-argparser-bool-arg-the-right-way/</id>
    <published>2018-10-07T05:45:20.000Z</published>
    <updated>2018-10-07T06:22:20.703Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;The-Context&quot;&gt;&lt;a href=&quot;#The-Context&quot; class=&quot;headerlink&quot; title=&quot;The Context&quot;&gt;&lt;/a&gt;The Context&lt;/h2&gt;&lt;p&gt;之前拿 Python 写了一个 CMake 的 build
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="python" scheme="http://kingsamchen.github.io/tags/python/"/>
    
      <category term="argparser" scheme="http://kingsamchen.github.io/tags/argparser/"/>
    
      <category term="bool argument" scheme="http://kingsamchen.github.io/tags/bool-argument/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in Sep 2018</title>
    <link href="http://kingsamchen.github.io/2018/10/05/monthly-read-posts-in-sep-2018/"/>
    <id>http://kingsamchen.github.io/2018/10/05/monthly-read-posts-in-sep-2018/</id>
    <published>2018-10-04T16:33:28.000Z</published>
    <updated>2018-10-07T02:20:08.931Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Programming-Language&quot;&gt;&lt;a href=&quot;#Programming-Language&quot; class=&quot;headerlink&quot; title=&quot;Programming Language&quot;&gt;&lt;/a&gt;Programming Language&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.fluentcpp.com/2016/12/08/strong-types-for-strong-interfaces/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Strong types for strong interfaces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to add a type wrapper for built-in types.&lt;/p&gt;
&lt;p&gt;Besides using phantom template parameter to avoid alias, one can also use private inheritance:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NamedType&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    explicit NamedType(T const&amp;amp; value) : value_(value) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    explicit NamedType(T&amp;amp;&amp;amp; value) : value_(std::move(value)) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;T&amp;amp; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value_; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;T &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;amp; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value_; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    T value_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Width&lt;/span&gt; :&lt;/span&gt; NamedType&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; NamedType::NamedType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; NamedType::get;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.fluentcpp.com/2016/12/12/passing-strong-types-by-reference/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Passing strong types by reference – First attempt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post is the sequal of the above post.&lt;/p&gt;
&lt;p&gt;The main problem the post tryies to solve is: how to make copy of &lt;code&gt;NamedType&lt;/code&gt; values cheap.&lt;/p&gt;
&lt;p&gt;However, I am conservative on using reference-wrapper as the solution, because doing this has to expose the lifetime of the wrapped object to public; after all, reference-wrapper is only a point per se.&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="template" scheme="http://kingsamchen.github.io/tags/template/"/>
    
      <category term="TCP" scheme="http://kingsamchen.github.io/tags/TCP/"/>
    
      <category term="strong type" scheme="http://kingsamchen.github.io/tags/strong-type/"/>
    
      <category term="interface" scheme="http://kingsamchen.github.io/tags/interface/"/>
    
      <category term="exception handling" scheme="http://kingsamchen.github.io/tags/exception-handling/"/>
    
      <category term="virtual memory" scheme="http://kingsamchen.github.io/tags/virtual-memory/"/>
    
      <category term="TIME_WAIT" scheme="http://kingsamchen.github.io/tags/TIME-WAIT/"/>
    
      <category term="abstraction" scheme="http://kingsamchen.github.io/tags/abstraction/"/>
    
  </entry>
  
  <entry>
    <title>给 ydiff 提了个 PR</title>
    <link href="http://kingsamchen.github.io/2018/09/26/made-a-pr-for-ydiff/"/>
    <id>http://kingsamchen.github.io/2018/09/26/made-a-pr-for-ydiff/</id>
    <published>2018-09-26T15:50:36.000Z</published>
    <updated>2018-10-07T02:20:08.931Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://github.com/ymattw/ydiff&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ydiff&lt;/a&gt; 是基于 CLI 的一个 diff tool，支持 side-by-side 模式&lt;/p&gt;
&lt;p&gt;前段时间在
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="python" scheme="http://kingsamchen.github.io/tags/python/"/>
    
      <category term="pull request" scheme="http://kingsamchen.github.io/tags/pull-request/"/>
    
      <category term="diff" scheme="http://kingsamchen.github.io/tags/diff/"/>
    
  </entry>
  
  <entry>
    <title>Git Invert-grep Bug</title>
    <link href="http://kingsamchen.github.io/2018/09/14/git-invert-grep-bug/"/>
    <id>http://kingsamchen.github.io/2018/09/14/git-invert-grep-bug/</id>
    <published>2018-09-14T07:27:33.000Z</published>
    <updated>2018-09-14T07:53:32.532Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;前段时间部门技术老板要求每个组统计每个研发同学在某个版本的千行 bug 率，所以第一步就要能够统计某个人在某个指定分支的提交信息。&lt;/p&gt;
&lt;p&gt;这个很容易做，利用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="bug" scheme="http://kingsamchen.github.io/tags/bug/"/>
    
      <category term="git" scheme="http://kingsamchen.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in Aug 2018</title>
    <link href="http://kingsamchen.github.io/2018/09/03/monthly-read-posts-in-aug-2018/"/>
    <id>http://kingsamchen.github.io/2018/09/03/monthly-read-posts-in-aug-2018/</id>
    <published>2018-09-03T05:14:04.000Z</published>
    <updated>2018-09-14T07:17:16.842Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Programming-Languages&quot;&gt;&lt;a href=&quot;#Programming-Languages&quot; class=&quot;headerlink&quot; title=&quot;Programming Languages&quot;&gt;&lt;/a&gt;Programming Languages&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=fOV7I-nmVXw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CppCon 2015: Fedor Pikus “The Unexceptional Exceptions”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Handling exceptions is just as to handle errors using error code, exception is just a tool.&lt;/p&gt;
&lt;p&gt;The key point is to maintain the program state in a well defiend state.&lt;/p&gt;
&lt;p&gt;Turn error handling into resource management and use RAII to automate it; use explicit try…catch only when absolute necessary.&lt;/p&gt;
&lt;p&gt;Bonus tip: avoid uses of &lt;code&gt;pthread_cancel&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://itnext.io/pros-and-cons-of-functional-programming-32cdf527e1c2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pros and cons of functional programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pure function: avoid shared state; immutable structures; function composition.&lt;/p&gt;
&lt;p&gt;Declarative: instead of answers the question ‘how to do’ in imperative style, it answers the question ‘what to do’; imperative relies on instructions while declarative relies more on expressions.&lt;/p&gt;
&lt;p&gt;Cons of FP: not suitable for graph algorithms; major shift on mind patterns.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.brianstorti.com/understanding-shell-script-idiom-redirect/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Understanding Shell Script’s idiom: 2&amp;gt;&amp;amp;1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;General usage:&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat foo.txt &amp;gt; result.log 2&amp;gt;&amp;amp;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;fd for stdout and stderr are 1 and 2 respectively&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a &amp;gt; b&lt;/code&gt; is a shortcut for &lt;code&gt;a 1&amp;gt; b&lt;/code&gt; and 1 here is fd value for stdout&lt;/li&gt;
&lt;li&gt;you can use &lt;code&gt;&amp;amp;fd&lt;/code&gt; to reference a fd value&lt;/li&gt;
&lt;li&gt;therefore, using &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; would redirect stderr to stdout, and &lt;code&gt;1&amp;gt;&amp;amp;2&lt;/code&gt; would do the opposite.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="raft" scheme="http://kingsamchen.github.io/tags/raft/"/>
    
      <category term="membership protocol" scheme="http://kingsamchen.github.io/tags/membership-protocol/"/>
    
      <category term="tcp flow control" scheme="http://kingsamchen.github.io/tags/tcp-flow-control/"/>
    
      <category term="GIL" scheme="http://kingsamchen.github.io/tags/GIL/"/>
    
      <category term="variadic template" scheme="http://kingsamchen.github.io/tags/variadic-template/"/>
    
      <category term="parallelism" scheme="http://kingsamchen.github.io/tags/parallelism/"/>
    
      <category term="lock-free" scheme="http://kingsamchen.github.io/tags/lock-free/"/>
    
  </entry>
  
  <entry>
    <title>开了个新坑 ezio</title>
    <link href="http://kingsamchen.github.io/2018/08/31/new-toy-ezio/"/>
    <id>http://kingsamchen.github.io/2018/08/31/new-toy-ezio/</id>
    <published>2018-08-30T17:04:26.000Z</published>
    <updated>2018-09-01T05:04:50.903Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;前段时间分别在 Linux 和 Windows 下实现了一个简单的 TCP 网络框架之后，感觉一些必要的坑都踩的差不多了，可以开始动手写一个真正的跨平台的 TCP 网络框架了。&lt;/p&gt;
&lt;p&gt;于是就有了这个新坑：ezio。&lt;/p&gt;
&lt;p&gt;ezio 这个名字是某天跑步的时候突然想到的，有几重含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;致敬刺客信条里的 Ezio Auditore，寓意希望这个库能够和刺客一样，虽轻量，但需要时恰到好处，不含糊&lt;/li&gt;
&lt;li&gt;致敬（碰瓷）Boost.ASIO，因为两个名字发音非常接近&lt;/li&gt;
&lt;li&gt;第三个是朋友发现的，他把 ezio 念成了 e-z-io（easy io），于是赋予了一个新的含义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ezio 的目标是：&lt;strong&gt;提供同时支持 Linux 和 Windows 的轻量型非阻塞且具备扩展性（non-blocking and scalable）的 TCP 网络框架；针对 Linux 做性能侧优化，针对 Windows 做一致性开发体验的优化。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个目标初看起来有点怪异，但是确实非常实际的做法。&lt;/p&gt;
&lt;p&gt;因为 Linux 和 Windows 在网络编程上存在根本的范式差异性，所以为了提供一致的对外接口，必须要有所侧重和牺牲。Linux 目前占据了绝大多数互联网产品服务器系统的份额，而 Windows 则提供了可以说是当前最好的开发环境。&lt;/p&gt;
&lt;p&gt;ezio 这个设计目标可以使得绝大多数业务逻辑在 Windows 上开发，然后在 Linux 上进行最后的部署。&lt;/p&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="epoll" scheme="http://kingsamchen.github.io/tags/epoll/"/>
    
      <category term="TCP" scheme="http://kingsamchen.github.io/tags/TCP/"/>
    
      <category term="IOCP" scheme="http://kingsamchen.github.io/tags/IOCP/"/>
    
      <category term="network" scheme="http://kingsamchen.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Dealing With Multiple Types As a Category</title>
    <link href="http://kingsamchen.github.io/2018/08/15/dealing-with-multiple-types-as-a-category/"/>
    <id>http://kingsamchen.github.io/2018/08/15/dealing-with-multiple-types-as-a-category/</id>
    <published>2018-08-15T13:57:49.000Z</published>
    <updated>2018-09-01T02:54:00.731Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Macro &lt;code&gt;ENSURE()&lt;/code&gt; from KBase can ‘capture’ variables by outputing their content to the internal stringtream, provided the type
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="enum" scheme="http://kingsamchen.github.io/tags/enum/"/>
    
      <category term="SFINAE" scheme="http://kingsamchen.github.io/tags/SFINAE/"/>
    
      <category term="tag dispatching" scheme="http://kingsamchen.github.io/tags/tag-dispatching/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in July 2018</title>
    <link href="http://kingsamchen.github.io/2018/08/02/monthly-read-posts-in-july-2018/"/>
    <id>http://kingsamchen.github.io/2018/08/02/monthly-read-posts-in-july-2018/</id>
    <published>2018-08-02T14:03:51.000Z</published>
    <updated>2018-09-14T07:17:16.843Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Programming-Language&quot;&gt;&lt;a href=&quot;#Programming-Language&quot; class=&quot;headerlink&quot; title=&quot;Programming Language&quot;&gt;&lt;/a&gt;Programming Language&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.fluentcpp.com/2016/11/24/clearer-interfaces-with-optionalt/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Clearer interfaces with optional&lt;t&gt;&lt;/t&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.fluentcpp.com/2016/12/01/partial-queries-with-optionalt/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Partial queries with optional&lt;t&gt;&lt;/t&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;optional&amp;lt;T&amp;gt;&lt;/code&gt; 介绍 &amp;amp; 简单使用例子&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=9IVCVSwn-fI&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CppCon 2015: John R. Bandela “Simple, Extensible Pattern Matching in C++14”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个轻量级的 pattern matching 库简要介绍。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2rnIHsqABfM&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CppCon 2015: Greg Miller “Time Programming Fundamentals”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google 内部实现的一个处理 date-time 的轮子。&lt;/p&gt;
&lt;p&gt;不过讲道理，这块内容还不如关注一下之前 monthly read posts 里出现的&lt;a href=&quot;http://kingsamchen.github.io/2017/08/01/monthly-read-posts-in-july-2017/&quot;&gt;这篇&lt;/a&gt; 里提到的 date library。&lt;/p&gt;
&lt;p&gt;看起来差不多会在 &lt;a href=&quot;https://en.cppreference.com/w/cpp/chrono&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C++ 20 引入&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;When MSDN says NULL, is it okay to use nullptr?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Short anwser: YES.&lt;/p&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="atomic" scheme="http://kingsamchen.github.io/tags/atomic/"/>
    
      <category term="constexpr" scheme="http://kingsamchen.github.io/tags/constexpr/"/>
    
      <category term="date time" scheme="http://kingsamchen.github.io/tags/date-time/"/>
    
      <category term="pattern matching" scheme="http://kingsamchen.github.io/tags/pattern-matching/"/>
    
      <category term="epoll" scheme="http://kingsamchen.github.io/tags/epoll/"/>
    
      <category term="multithreading" scheme="http://kingsamchen.github.io/tags/multithreading/"/>
    
      <category term="type traits" scheme="http://kingsamchen.github.io/tags/type-traits/"/>
    
      <category term="TCP" scheme="http://kingsamchen.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>在 Windows 上运行 Linux GUI 程序</title>
    <link href="http://kingsamchen.github.io/2018/07/06/running-linux-gui-applications-on-windows/"/>
    <id>http://kingsamchen.github.io/2018/07/06/running-linux-gui-applications-on-windows/</id>
    <published>2018-07-06T14:43:29.000Z</published>
    <updated>2018-07-07T09:57:23.047Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;自从 Windows 10 提供 WSL 之后，在 Windows 上运行 Linux CLI 程序并不是一个复杂的事情；然而俗话说饱暖思淫欲，既然可以做到在 Windows 上跑 Linux CLI 了，下一步自然想的是在 Windows 上跑 Linux GUI 程序。&lt;/p&gt;
&lt;p&gt;之所以要跑 GUI 是因为，无论是 vscode 还是 CLion，写 C++ 的体验都比在 terminal 里开一个 vim 要好太多了，无论你是花了多少时间配置了 &lt;code&gt;.vimrc&lt;/code&gt;，在 CLion 面前都是战五渣。更何况我买了 Jetbrains 的 All product license，不用用难道留着过年吗。&lt;/p&gt;
&lt;p&gt;这里先解答两个常见疑问：&lt;/p&gt;
&lt;p&gt;Q：为什么不直接在虚拟机里使用？&lt;br&gt;A：因为 Linux 对 4K 屏原生支持太糟糕。哪怕 Mint 提供了 double scaling，解决了一些外观上的问题，我在 4K 的环境下一开 vscode 程序就崩溃，而且运行操作明显掉帧。&lt;br&gt;另外一个问题是，单纯的虚拟机操作和外界宿主太隔离，等于我得配置两套完全一样的环境（比如浏览器，常见的应用，甚至 SS 等），而且和宿主的交互非常不够便利。&lt;/p&gt;
&lt;p&gt;Q：为什么不买 macbook？&lt;br&gt;A：？？你是认真的么？OS X 那么垃圾的系统。再说我要写 C++ server-end 的代码，要是可以用 OS X 我为什么不直接在 Windows 上跑?&lt;/p&gt;
&lt;p&gt;另外有一个剧透：我尝试过运行 WSL 里的 Linux GUI 程序，例如 CLion，但是目前 WSL 的文件系统性能过于糟糕，CLion 一个劲的冒错误提示，所以，下面的环境假定是虚拟机里的 Linux 或者一台单独的 Linux 设备。&lt;br&gt;
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="ssh" scheme="http://kingsamchen.github.io/tags/ssh/"/>
    
      <category term="x11 forwarding" scheme="http://kingsamchen.github.io/tags/x11-forwarding/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in Jun 2018</title>
    <link href="http://kingsamchen.github.io/2018/07/01/monthly-read-posts-in-jun-2018/"/>
    <id>http://kingsamchen.github.io/2018/07/01/monthly-read-posts-in-jun-2018/</id>
    <published>2018-07-01T14:45:10.000Z</published>
    <updated>2018-07-01T14:58:30.894Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Programming-Language&quot;&gt;&lt;a href=&quot;#Programming-Language&quot; class=&quot;headerlink&quot; title=&quot;Programming Language&quot;&gt;&lt;/a&gt;Programming Language&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iLiDezv_Frk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CppCon 2015: Richard Powell “Intro to the C++ Object Model”
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本覆盖了 POD，无需函数类，单继承的情况，扫盲效果俱佳。&lt;/p&gt;
&lt;p&gt;至于为什么没有包含 multiple inheritance / virtual inheritance，作者说自己不是很 condifent with that。&lt;/p&gt;
&lt;p&gt;讲道理，MI / VI 在一般的设计里都会尽量避免，而且各种乱七八糟的 case 很多，这里不涉及反而是个正确的做法。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://akrzemi1.wordpress.com/2011/04/06/assertions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Assertions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，我很赞同文中作者对于 assertion 是 &lt;em&gt;guarantees given by the author of a piece of code to himself/herself&lt;/em&gt; 但是接下来的大部观点都不赞同。&lt;/p&gt;
&lt;p&gt;比如作者认为不应该 assert on precodintions &amp;amp; postconditions，因为 assertion 是 for implementation details，这个思路其实不对。&lt;/p&gt;
&lt;p&gt;关于 assertion，目前看过最好的阐述还是 &lt;a href=&quot;https://book.douban.com/subject/3406939/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing Solid Code&lt;/a&gt;，推荐去阅读这个。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://akrzemi1.wordpress.com/2011/05/06/compile-time-computations/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Compile-time computations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇 post 展示了 constexpr functions 错误报告的常见手段：抛异常。&lt;/p&gt;
&lt;p&gt;这个在之前的某个 cppcon talk 里有专门的介绍。&lt;/p&gt;
&lt;p&gt;另外，文中更进一步，抽出专门的 constexpr validation functions，并通过 comma operator 串联。&lt;/p&gt;
&lt;p&gt;C++ 14 支持多句之后，连 comma operatos 都可以免掉了。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="golang" scheme="http://kingsamchen.github.io/tags/golang/"/>
    
      <category term="epoll" scheme="http://kingsamchen.github.io/tags/epoll/"/>
    
      <category term="compile-time" scheme="http://kingsamchen.github.io/tags/compile-time/"/>
    
      <category term="assert" scheme="http://kingsamchen.github.io/tags/assert/"/>
    
      <category term="RVO" scheme="http://kingsamchen.github.io/tags/RVO/"/>
    
      <category term="functional" scheme="http://kingsamchen.github.io/tags/functional/"/>
    
      <category term="goroutine" scheme="http://kingsamchen.github.io/tags/goroutine/"/>
    
      <category term="threading model" scheme="http://kingsamchen.github.io/tags/threading-model/"/>
    
      <category term="select" scheme="http://kingsamchen.github.io/tags/select/"/>
    
      <category term="poll" scheme="http://kingsamchen.github.io/tags/poll/"/>
    
  </entry>
  
  <entry>
    <title>Modern CMake</title>
    <link href="http://kingsamchen.github.io/2018/06/19/modern-cmake/"/>
    <id>http://kingsamchen.github.io/2018/06/19/modern-cmake/</id>
    <published>2018-06-19T07:22:07.000Z</published>
    <updated>2018-07-01T14:38:13.754Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;但凡有点历史的东西，在演进到一个新的阶段时，总会总结一套新的 practices 然后冠之以 modern，例如 modern C++，还有今天的主题 —— modern CMake。&lt;/p&gt;
&lt;p&gt;上周花了一点时间稍微研究了一下所谓的 modern cmake，然后将
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="cmake" scheme="http://kingsamchen.github.io/tags/cmake/"/>
    
  </entry>
  
  <entry>
    <title>Build Your Own HTTP Proxy Server Using Go</title>
    <link href="http://kingsamchen.github.io/2018/06/10/build-your-own-http-proxy-using-go/"/>
    <id>http://kingsamchen.github.io/2018/06/10/build-your-own-http-proxy-using-go/</id>
    <published>2018-06-10T11:54:44.000Z</published>
    <updated>2018-06-10T13:56:53.568Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Go is a quite awesome programming language for building network applications. So I built my own HTTP proxy server using go last week.&lt;/p&gt;
&lt;p&gt;To grasp the essence of how HTTP proxy server works, I choosed to implement it on TCP transport layer, forwarding TCP traffic directly.&lt;/p&gt;
&lt;p&gt;Essentially, it runs a server, accepting incoming TCP connections and from which the server extracts target host of a request by parsing HTTP protocol messages. The server then establishes a connection to the target host, and finally operates as an intermedia, forwarding traffic from one host to another.&lt;/p&gt;
&lt;p&gt;Implementing a TCP server which is able to handle concurrent requests uing go is easier than you thought: just runs a loop to accept requests, launching a new goroutine for each new connection:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Server &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	addr     &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	listener net.Listener&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(srv *Server)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; err error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	srv.listener, err = net.Listen(&lt;span class=&quot;string&quot;&gt;&quot;tcp&quot;&lt;/span&gt;, srv.addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		log.Fatalf(&lt;span class=&quot;string&quot;&gt;&quot;Failed to listen at %s : %v&quot;&lt;/span&gt;, srv.addr, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	log.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Proxy is listening at %s&quot;&lt;/span&gt;, srv.addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	srv.runLoop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(srv *Server)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;runLoop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		conn, err := srv.listener.Accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			log.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Failed to accept an incoming connection : %v&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; srv.handleConnection(conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(srv *Server)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleConnection&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(conn net.Conn)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c := newConnection(conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c.serve()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="proxy" scheme="http://kingsamchen.github.io/tags/proxy/"/>
    
      <category term="http" scheme="http://kingsamchen.github.io/tags/http/"/>
    
      <category term="golang" scheme="http://kingsamchen.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in May 2018</title>
    <link href="http://kingsamchen.github.io/2018/06/01/monthly-read-posts-in-may-2018/"/>
    <id>http://kingsamchen.github.io/2018/06/01/monthly-read-posts-in-may-2018/</id>
    <published>2018-06-01T14:39:00.000Z</published>
    <updated>2018-06-01T14:43:08.903Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerlink&quot; title=&quot;Misc&quot;&gt;&lt;/a&gt;Misc&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;怎样花两年时间去面试一个人&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当前行业招聘的不靠谱，招揽优秀人员的难度大。&lt;/p&gt;
&lt;p&gt;脱颖而出的核心：良好的阅读习惯 + Github 项目&lt;/p&gt;
&lt;p&gt;这里说的两年是针对应届生来说的，对于已经工作的人来说，可以当作是虚指。&lt;/p&gt;
&lt;p&gt;不过文中提到的，拥抱变化的三个核心点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;触动内心的大象&lt;/li&gt;
&lt;li&gt;建立清晰明确的目标&lt;/li&gt;
&lt;li&gt;扫清前进道路的障碍&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;颇有道理。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://gulu-dev.com/post/2014-07-28-tech-evaluation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;何判断一个技术(中间件/库/工具)的靠谱程度？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何做技术选型&lt;/p&gt;
&lt;h3 id=&quot;System-amp-Architecture&quot;&gt;&lt;a href=&quot;#System-amp-Architecture&quot; class=&quot;headerlink&quot; title=&quot;System &amp;amp; Architecture&quot;&gt;&lt;/a&gt;System &amp;amp; Architecture&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://0xffffff.org/2017/05/01/41-linux-io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;聊聊Linux IO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A brief introduction to Linux I/O stack.&lt;/p&gt;
&lt;p&gt;这篇 post 的质量在国内技术博客里算是少有的干货。&lt;/p&gt;
&lt;p&gt;另，关于 page cache 和 buffer cache 的最新的内容，可以参考 Robert Love 在 quora 上的一个&lt;a href=&quot;http://qr.ae/TUTNCz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;回答&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=k12BJGSc2Nc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CppCon 2015: John Farrier “Demystifying Floating Point”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;工程实践上使用浮点数（IEEE-754）需要注意的一些坑。&lt;/p&gt;
&lt;p&gt;看之前最好翻一下 CSAPP 中关于浮点数 IEEE-754 模型的基础知识&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="linux" scheme="http://kingsamchen.github.io/tags/linux/"/>
    
      <category term="lock-free" scheme="http://kingsamchen.github.io/tags/lock-free/"/>
    
      <category term="concurrency" scheme="http://kingsamchen.github.io/tags/concurrency/"/>
    
      <category term="面试" scheme="http://kingsamchen.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="技术选型" scheme="http://kingsamchen.github.io/tags/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/"/>
    
      <category term="hash table" scheme="http://kingsamchen.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>Build Your Own Threadpool With C++</title>
    <link href="http://kingsamchen.github.io/2018/05/30/build-your-own-thread-pool-with-cpp/"/>
    <id>http://kingsamchen.github.io/2018/05/30/build-your-own-thread-pool-with-cpp/</id>
    <published>2018-05-30T12:27:37.000Z</published>
    <updated>2018-06-01T14:38:23.799Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Why-Threadpool-Matters&quot;&gt;&lt;a href=&quot;#Why-Threadpool-Matters&quot; class=&quot;headerlink&quot; title=&quot;Why Threadpool Matters&quot;&gt;&lt;/a&gt;Why Threadpool Matters&lt;/h2&gt;&lt;p&gt;Why on the earth do we need thread-pool? The answer is obvious: for doing jobs behind the scenes.&lt;/p&gt;
&lt;p&gt;That is, saying, you have a constant stream of incoming tasks to complete, and most of which either incur heavy computation or invovle device I/O, you definitely don’t want to execute them on your main thread, because it will block your main thread until the job is done, making your application less responsive.&lt;/p&gt;
&lt;p&gt;However, with thread-pool, you can simply submit a task to the pool, then continue what was doing; the task will eventually be completed on a thread of the thread-pool.&lt;/p&gt;
&lt;p&gt;If your processor has multiple cores, the task is possibly performed concurrently with your jobs on the main thread.&lt;/p&gt;
&lt;h2 id=&quot;What-Should-a-Threadpool-Provide&quot;&gt;&lt;a href=&quot;#What-Should-a-Threadpool-Provide&quot; class=&quot;headerlink&quot; title=&quot;What Should a Threadpool Provide&quot;&gt;&lt;/a&gt;What Should a Threadpool Provide&lt;/h2&gt;&lt;p&gt;Before we switch our focus to editor, we are better to think twice about what we can do with the thread-pool we will build.&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="thread-pool" scheme="http://kingsamchen.github.io/tags/thread-pool/"/>
    
  </entry>
  
  <entry>
    <title>浅析 RefCounted 和 WeakPtr：Chromium Base 篇</title>
    <link href="http://kingsamchen.github.io/2018/05/14/demystify-ref-counted-and-weak-ptr-in-chromium-base/"/>
    <id>http://kingsamchen.github.io/2018/05/14/demystify-ref-counted-and-weak-ptr-in-chromium-base/</id>
    <published>2018-05-14T06:47:38.000Z</published>
    <updated>2018-06-01T14:38:23.800Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;序言请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/13/shared-ptr-internals-introduction/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSVC STL 的分析版本请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/16/demystify-shared-ptr-and-weak-ptr-in-msvc-stl/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Libstdc++ 的分析版本请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/30/demystify-shared-ptr-and-weak-ptr-in-libstdcpp/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Boost 的分析版本请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/05/02/demystify-shared-ptr-and-weak-ptr-in-boost/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注 1：因为这不是第一篇分析，所以会直入主题，跳过文学写作常用的累赘的过渡。&lt;/p&gt;
&lt;p&gt;注 2：这是系列最后一篇。&lt;/p&gt;
&lt;h2 id=&quot;目标版本选择&quot;&gt;&lt;a href=&quot;#目标版本选择&quot; class=&quot;headerlink&quot; title=&quot;目标版本选择&quot;&gt;&lt;/a&gt;目标版本选择&lt;/h2&gt;&lt;p&gt;Chromium tag 68.0.3421.1&lt;/p&gt;
&lt;p&gt;代码位置：&lt;code&gt;base/memory/ref_counted.{h, cc}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;RefCountedBase-和-RefCounted&quot;&gt;&lt;a href=&quot;#RefCountedBase-和-RefCounted&quot; class=&quot;headerlink&quot; title=&quot;RefCountedBase 和 RefCounted&quot;&gt;&lt;/a&gt;RefCountedBase 和 RefCounted&lt;/h2&gt;&lt;p&gt;两个类实现了非线程安全的引用计数，即：内部计数使用的是 built-in integer&lt;/p&gt;
&lt;p&gt;先看看 &lt;code&gt;RefCountedBase&lt;/code&gt; 的大致结构：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RefCountedBase&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RefCountedBase&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(StartRefCountFromZeroTag)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RefCountedBase&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(StartRefCountFromOneTag)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ~RefCountedBase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AddRef&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; ref_count_ = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; DCHECK_IS_ON()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; needs_adopt_ref_ = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; in_dtor_ = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutable&lt;/span&gt; SequenceChecker sequence_checker_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DISALLOW_COPY_AND_ASSIGN(RefCountedBase);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出核心 &lt;code&gt;ref_count_&lt;/code&gt; 类型是 &lt;code&gt;uint32_t&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ctor 和 dtor 都被定义为 protected，说明这类使用做基类；同时提供了 &lt;code&gt;AddRef()&lt;/code&gt; 和 &lt;code&gt;Release()&lt;/code&gt;，进行内部的计数增减。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="chromium" scheme="http://kingsamchen.github.io/tags/chromium/"/>
    
      <category term="shared_ptr" scheme="http://kingsamchen.github.io/tags/shared-ptr/"/>
    
      <category term="shared_ptr-internals" scheme="http://kingsamchen.github.io/tags/shared-ptr-internals/"/>
    
      <category term="source-code-study" scheme="http://kingsamchen.github.io/tags/source-code-study/"/>
    
      <category term="weak_ptr" scheme="http://kingsamchen.github.io/tags/weak-ptr/"/>
    
      <category term="base lib" scheme="http://kingsamchen.github.io/tags/base-lib/"/>
    
  </entry>
  
  <entry>
    <title>浅析 shared_ptr：Boost 篇</title>
    <link href="http://kingsamchen.github.io/2018/05/02/demystify-shared-ptr-and-weak-ptr-in-boost/"/>
    <id>http://kingsamchen.github.io/2018/05/02/demystify-shared-ptr-and-weak-ptr-in-boost/</id>
    <published>2018-05-02T03:58:19.000Z</published>
    <updated>2018-06-01T14:38:23.801Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;序言请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/13/shared-ptr-internals-introduction/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSVC STL 的分析版本请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/16/demystify-shared-ptr-and-weak-ptr-in-msvc-stl/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Libstdc++ 的分析版本请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/30/demystify-shared-ptr-and-weak-ptr-in-libstdcpp/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注：因为这不是第一篇分析，所以会直入主题，跳过文学写作常用的累赘的过渡。&lt;/p&gt;
&lt;h2 id=&quot;目标版本选择&quot;&gt;&lt;a href=&quot;#目标版本选择&quot; class=&quot;headerlink&quot; title=&quot;目标版本选择&quot;&gt;&lt;/a&gt;目标版本选择&lt;/h2&gt;&lt;p&gt;选用最新的 Boost 1.67 作为研究目标&lt;/p&gt;
&lt;p&gt;在开始正题前，先简单看一下 &lt;code&gt;shared_ptr&lt;/code&gt; 的类成员，方便后续分析：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; detail &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;T&lt;/span&gt; &amp;gt; &lt;span class=&quot;title&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sp_element&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; T type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;title&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;shared_ptr&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; boost::detail::sp_element&amp;lt; T &amp;gt;::type element_type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// omitted other&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    element_type * px;                 &lt;span class=&quot;comment&quot;&gt;// contained pointer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boost::detail::shared_count pn;    &lt;span class=&quot;comment&quot;&gt;// reference counter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="shared_ptr" scheme="http://kingsamchen.github.io/tags/shared-ptr/"/>
    
      <category term="shared_ptr-internals" scheme="http://kingsamchen.github.io/tags/shared-ptr-internals/"/>
    
      <category term="source-code-study" scheme="http://kingsamchen.github.io/tags/source-code-study/"/>
    
      <category term="weak_ptr" scheme="http://kingsamchen.github.io/tags/weak-ptr/"/>
    
      <category term="boost" scheme="http://kingsamchen.github.io/tags/boost/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Post in Apr 2018</title>
    <link href="http://kingsamchen.github.io/2018/05/01/monthly-read-posts-in-apr-2018/"/>
    <id>http://kingsamchen.github.io/2018/05/01/monthly-read-posts-in-apr-2018/</id>
    <published>2018-05-01T09:50:11.000Z</published>
    <updated>2018-05-01T10:03:00.593Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/what-is-load-balancing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;What is Load
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="load balancing" scheme="http://kingsamchen.github.io/tags/load-balancing/"/>
    
      <category term="random" scheme="http://kingsamchen.github.io/tags/random/"/>
    
      <category term="cache coherency" scheme="http://kingsamchen.github.io/tags/cache-coherency/"/>
    
      <category term="consistent hashing" scheme="http://kingsamchen.github.io/tags/consistent-hashing/"/>
    
  </entry>
  
  <entry>
    <title>std::function Must be Copyable</title>
    <link href="http://kingsamchen.github.io/2018/04/23/std-funcion-must-be-copyable/"/>
    <id>http://kingsamchen.github.io/2018/04/23/std-funcion-must-be-copyable/</id>
    <published>2018-04-23T15:55:09.000Z</published>
    <updated>2018-05-01T09:49:24.132Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;前几天在写一个 &lt;a href=&quot;https://github.com/kingsamchen/Eureka/tree/master/TinyThreadPool&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThreadPool
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="thread-pool" scheme="http://kingsamchen.github.io/tags/thread-pool/"/>
    
      <category term="std::function" scheme="http://kingsamchen.github.io/tags/std-function/"/>
    
      <category term="packaged_task" scheme="http://kingsamchen.github.io/tags/packaged-task/"/>
    
  </entry>
  
  <entry>
    <title>Use Lambda With PostTask</title>
    <link href="http://kingsamchen.github.io/2018/04/11/use-lambda-with-post-task/"/>
    <id>http://kingsamchen.github.io/2018/04/11/use-lambda-with-post-task/</id>
    <published>2018-04-11T12:03:59.000Z</published>
    <updated>2018-04-11T12:23:55.578Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;曾经为了能在 &lt;code&gt;PostTask()&lt;/code&gt; 里使用 lambda，实现了一个自动将 non-capturing lambda decay 到对应函数指针，在利用 &lt;code&gt;base::Bind()&lt;/code&gt; 的方案&lt;a
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="chromium" scheme="http://kingsamchen.github.io/tags/chromium/"/>
    
      <category term="lambda" scheme="http://kingsamchen.github.io/tags/lambda/"/>
    
      <category term="base" scheme="http://kingsamchen.github.io/tags/base/"/>
    
  </entry>
  
</feed>
