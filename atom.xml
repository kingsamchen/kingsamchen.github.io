<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KC的废墟堆</title>
  
  <subtitle>Will you serve in Heaven, or rule in Hell</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kingsamchen.github.io/"/>
  <updated>2019-11-04T14:09:43.877Z</updated>
  <id>http://kingsamchen.github.io/</id>
  
  <author>
    <name>Kingsley Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个轮子：基于 token bucket 的 rate-limit</title>
    <link href="http://kingsamchen.github.io/2019/11/04/token-bucket-based-rate-limit/"/>
    <id>http://kingsamchen.github.io/2019/11/04/token-bucket-based-rate-limit/</id>
    <published>2019-11-04T12:31:14.000Z</published>
    <updated>2019-11-04T14:09:43.877Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;地址：&lt;a href=&quot;https://github.com/kingsamchen/Eureka/tree/master/token-bucket-rate-limit&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="algorithm" scheme="http://kingsamchen.github.io/tags/algorithm/"/>
    
      <category term="token bucket" scheme="http://kingsamchen.github.io/tags/token-bucket/"/>
    
      <category term="rate-limit" scheme="http://kingsamchen.github.io/tags/rate-limit/"/>
    
  </entry>
  
  <entry>
    <title>Windows 上使用 Git Tips 两则</title>
    <link href="http://kingsamchen.github.io/2019/10/19/two-git-tips-on-windows/"/>
    <id>http://kingsamchen.github.io/2019/10/19/two-git-tips-on-windows/</id>
    <published>2019-10-19T09:12:14.000Z</published>
    <updated>2019-10-19T09:27:44.767Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Windows-Terminal-中-git-log-显示-UTF-8-编码的中文&quot;&gt;&lt;a href=&quot;#Windows-Terminal-中-git-log-显示-UTF-8-编码的中文&quot; class=&quot;headerlink&quot; title=&quot;Windows
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="git" scheme="http://kingsamchen.github.io/tags/git/"/>
    
      <category term="powershell" scheme="http://kingsamchen.github.io/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>复习：DCLP 和 Memory Reordering</title>
    <link href="http://kingsamchen.github.io/2019/10/01/review-dclp-and-memory-reordering/"/>
    <id>http://kingsamchen.github.io/2019/10/01/review-dclp-and-memory-reordering/</id>
    <published>2019-10-01T04:29:03.000Z</published>
    <updated>2019-10-01T08:40:09.015Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文是对 Jeff Preshing 的 &lt;a href=&quot;https://preshing.com/20130930/double-checked-locking-is-fixed-in-cpp11/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Double Checked Locking Is Fixed in C++ 11&lt;/a&gt; 笔记。&lt;/p&gt;
&lt;h3 id=&quot;0x00-传统实现&quot;&gt;&lt;a href=&quot;#0x00-传统实现&quot; class=&quot;headerlink&quot; title=&quot;0x00 传统实现&quot;&gt;&lt;/a&gt;0x00 传统实现&lt;/h3&gt;&lt;p&gt;因为 synchronization 只需要在实例第一次创建时保证；此后（ &lt;code&gt;instance != nullptr&lt;/code&gt; 时）都不需要锁来保证 synchronization。&lt;/p&gt;
&lt;p&gt;在第一次判断实例为空和上锁之间存在一个 potential race，因此上锁后需要再一次判断实例是否为空。&lt;/p&gt;
&lt;p&gt;这也是 double checked 的来由。&lt;/p&gt;
&lt;p&gt;所以一个传统但并不100%正确的 DCLP 实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton* &lt;span class=&quot;title&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (instance == &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::lock_guard&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex&amp;gt; lock(mtx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (instance == &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();				&lt;span class=&quot;comment&quot;&gt;// &amp;lt;-- key point&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// omit explicit static field initialization.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex mtx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton* instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这基本是早起 C++ DCLP 的实现架子。&lt;/p&gt;
&lt;h3 id=&quot;0x01-问题：内存乱序以及为什么锁帮不了忙&quot;&gt;&lt;a href=&quot;#0x01-问题：内存乱序以及为什么锁帮不了忙&quot; class=&quot;headerlink&quot; title=&quot;0x01 问题：内存乱序以及为什么锁帮不了忙&quot;&gt;&lt;/a&gt;0x01 问题：内存乱序以及为什么锁帮不了忙&lt;/h3&gt;&lt;p&gt;语句&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 C++ 中实际上等效于&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmp = &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(Singleton));  &lt;span class=&quot;comment&quot;&gt;// step 1: allocate memory via operator new&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;(tmp) Singleton;                     &lt;span class=&quot;comment&quot;&gt;// step 2: placement-new for construction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;instance = tmp;                         &lt;span class=&quot;comment&quot;&gt;// step 3: assign addr to instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：其中除了分配内存是固定第一步之外，构造对象和赋值内存地址的&lt;strong&gt;生成代码顺序&lt;/strong&gt;是由编译器自己决定。这里的顺序只是一种可能性。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="cpp" scheme="http://kingsamchen.github.io/tags/cpp/"/>
    
      <category term="singleton" scheme="http://kingsamchen.github.io/tags/singleton/"/>
    
      <category term="memory-reordering" scheme="http://kingsamchen.github.io/tags/memory-reordering/"/>
    
  </entry>
  
  <entry>
    <title>ASIO Buffer 使用简记</title>
    <link href="http://kingsamchen.github.io/2019/09/22/simple-notes-on-using-asio-buffer/"/>
    <id>http://kingsamchen.github.io/2019/09/22/simple-notes-on-using-asio-buffer/</id>
    <published>2019-09-22T12:27:48.000Z</published>
    <updated>2019-09-22T14:15:31.794Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;近段有相当一部分时间在&lt;a href=&quot;https://github.com/kingsamchen/Eureka/tree/master/learn-asio&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;熟悉和练习 ASIO&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;练习过程中发现 ASIO 中如何使用&amp;amp;管理 buffer 是新手大概率会遇到的问题。&lt;/p&gt;
&lt;p&gt;结合最近几个 practice demo，稍微简单总结了一下使用经验：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;0x00&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;const_buffer&lt;/code&gt; 和 &lt;code&gt;mutable_buffer&lt;/code&gt; 是两个 fundamental buffer classes。二者的区别在语义上表达的很明显了。&lt;/p&gt;
&lt;p&gt;实现上二者提供的接口非常一致，除了一个面向 &lt;code&gt;const void*&lt;/code&gt;，另一个面向 &lt;code&gt;void*&lt;/code&gt;。这点可以从 ctor 和 &lt;code&gt;data()&lt;/code&gt; 中看出。&lt;/p&gt;
&lt;p&gt;另外，为了和 C++ 现有的 const cast semantics 保持一致，一个 &lt;code&gt;mutable_buffer&lt;/code&gt; 对象可以 implicitly converted to &lt;code&gt;const_buffer&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="ASIO" scheme="http://kingsamchen.github.io/tags/ASIO/"/>
    
      <category term="networking" scheme="http://kingsamchen.github.io/tags/networking/"/>
    
      <category term="buffer" scheme="http://kingsamchen.github.io/tags/buffer/"/>
    
  </entry>
  
  <entry>
    <title>避免在 Linux 上使用 signals</title>
    <link href="http://kingsamchen.github.io/2019/09/09/avoid-using-signals-on-linux/"/>
    <id>http://kingsamchen.github.io/2019/09/09/avoid-using-signals-on-linux/</id>
    <published>2019-09-09T12:27:09.000Z</published>
    <updated>2019-09-13T11:12:35.372Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;首先承认这个标题乍看之下很像 troll，但真的不是 troll；“避免使用”总的来说更接近 &lt;em&gt;whenever possible&lt;/em&gt; 的意思。&lt;/p&gt;
&lt;p&gt;另外，这篇 post 面向的主要是偏底层的、直接使用 system calls 或其 runtime wrapper（glibc）的开发者，最典型的比如 C/C++ 开发者。&lt;/p&gt;
&lt;p&gt;其他语言的开发者通常因为要么 runtime “屏蔽”了这部分内容（如 Java）；要么 runtime 自身对这部分做了较大的抽象/改造（如 Golang），因此很难对此 post 提到的各种观点/做法产生共鸣。&lt;/p&gt;
&lt;p&gt;FYI：自从工作后中文写作能力一直在退化，因此这篇文章如果存在语句不通顺或者用词不当的地方，烦请见谅。&lt;/p&gt;
&lt;h2 id=&quot;0x00-背景回顾：什么是-signal？&quot;&gt;&lt;a href=&quot;#0x00-背景回顾：什么是-signal？&quot; class=&quot;headerlink&quot; title=&quot;0x00 背景回顾：什么是 signal？&quot;&gt;&lt;/a&gt;0x00 背景回顾：什么是 signal？&lt;/h2&gt;&lt;p&gt;signal 源自 Unix，后来成为 POSIX 标准的一部分，现在则被几乎所有的 *nix 系统支持。&lt;/p&gt;
&lt;p&gt;signal 本质上是一种通讯机制，用于系统在某个事件（event）发生时通知某个进程（或线程）。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="signal" scheme="http://kingsamchen.github.io/tags/signal/"/>
    
      <category term="Linux" scheme="http://kingsamchen.github.io/tags/Linux/"/>
    
      <category term="Unix" scheme="http://kingsamchen.github.io/tags/Unix/"/>
    
      <category term="signalfd" scheme="http://kingsamchen.github.io/tags/signalfd/"/>
    
      <category term="self-pipe trick" scheme="http://kingsamchen.github.io/tags/self-pipe-trick/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in Aug 2019</title>
    <link href="http://kingsamchen.github.io/2019/09/01/monthly-read-posts-in-aug-2019/"/>
    <id>http://kingsamchen.github.io/2019/09/01/monthly-read-posts-in-aug-2019/</id>
    <published>2019-09-01T12:13:28.000Z</published>
    <updated>2019-09-01T12:16:22.898Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Concurrency&quot;&gt;&lt;a href=&quot;#Concurrency&quot; class=&quot;headerlink&quot; title=&quot;Concurrency&quot;&gt;&lt;/a&gt;Concurrency&lt;/h2&gt;&lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="memory fence" scheme="http://kingsamchen.github.io/tags/memory-fence/"/>
    
      <category term="mysql" scheme="http://kingsamchen.github.io/tags/mysql/"/>
    
      <category term="lock-free" scheme="http://kingsamchen.github.io/tags/lock-free/"/>
    
      <category term="atomic" scheme="http://kingsamchen.github.io/tags/atomic/"/>
    
      <category term="systemd" scheme="http://kingsamchen.github.io/tags/systemd/"/>
    
  </entry>
  
  <entry>
    <title>Acquire/Release Operation 和 Acquire/Release Fence</title>
    <link href="http://kingsamchen.github.io/2019/08/31/acquire-release-operations-and-fences/"/>
    <id>http://kingsamchen.github.io/2019/08/31/acquire-release-operations-and-fences/</id>
    <published>2019-08-31T15:26:19.000Z</published>
    <updated>2019-08-31T16:20:19.661Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;其实是 Jeff Preshing 的 &lt;a href=&quot;https://preshing.com/20131125/acquire-and-release-fences-dont-work-the-way-youd-expect/&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="cpp" scheme="http://kingsamchen.github.io/tags/cpp/"/>
    
      <category term="memory fence" scheme="http://kingsamchen.github.io/tags/memory-fence/"/>
    
      <category term="memory ordering" scheme="http://kingsamchen.github.io/tags/memory-ordering/"/>
    
  </entry>
  
  <entry>
    <title>解决 CMake 依赖工程中同名 cmake 函数调用混乱</title>
    <link href="http://kingsamchen.github.io/2019/08/18/resolve-clashed-cmake-function-call/"/>
    <id>http://kingsamchen.github.io/2019/08/18/resolve-clashed-cmake-function-call/</id>
    <published>2019-08-18T12:52:04.000Z</published>
    <updated>2019-08-18T13:18:12.754Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;拿 learn-asio 这个项目练手时发现一个问题：learn-asio 依赖了 KBase，这两个项目都是我用 anvil 进行托管的，所以两个项目的 cmake 目录里各自有一份 &lt;code&gt;compiler_*.cmake&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;因为
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="cmake" scheme="http://kingsamchen.github.io/tags/cmake/"/>
    
      <category term="anvil" scheme="http://kingsamchen.github.io/tags/anvil/"/>
    
  </entry>
  
  <entry>
    <title>安利 asio-cmake</title>
    <link href="http://kingsamchen.github.io/2019/08/10/asio-cmake-package-wrapper/"/>
    <id>http://kingsamchen.github.io/2019/08/10/asio-cmake-package-wrapper/</id>
    <published>2019-08-10T08:33:28.000Z</published>
    <updated>2019-08-10T10:13:53.871Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-Background&quot;&gt;&lt;a href=&quot;#0x00-Background&quot; class=&quot;headerlink&quot; title=&quot;0x00 Background&quot;&gt;&lt;/a&gt;0x00 Background&lt;/h2&gt;&lt;p&gt;考虑到 ASIO 的相当一部分组件（subset）已经进入了 C++ 20 Networking TS，未来再经过一些小调整之后成为标准库的一员基本板上钉钉。&lt;/p&gt;
&lt;p&gt;那么提前熟悉一下 ASIO 也不是什么坏事，毕竟没准等到 C++ 23 的时候，coroutine, networking, executor 啥的都已经很完备了，谁都可以用 C++ 实现一些性能不差的 server-end 代码了（比如 RPC 框架？）。&lt;/p&gt;
&lt;p&gt;不过和使用 Boost 类似，使用 ASIO 作为依赖库也不是一件容易的事情；毕竟自 modern C++ 元年至今都8年了，CMake 还在成为 de facto building system 的道路上挣扎，广泛接受的包管理依然不见踪影…&lt;/p&gt;
&lt;h2 id=&quot;0x01-ASIO-CMake-Wrapper&quot;&gt;&lt;a href=&quot;#0x01-ASIO-CMake-Wrapper&quot; class=&quot;headerlink&quot; title=&quot;0x01 ASIO-CMake Wrapper&quot;&gt;&lt;/a&gt;0x01 ASIO-CMake Wrapper&lt;/h2&gt;&lt;p&gt;陈年老账就不再扯了，得益于 CMake 3.2 开始提倡的 taget-based properties 和 CMake 3.11 开始提供的 &lt;code&gt;FetchContent&lt;/code&gt; module，我花了一些时间实现了一个基于 &lt;code&gt;FetchContent&lt;/code&gt; 的 asio-cmake wrapper。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="cpp" scheme="http://kingsamchen.github.io/tags/cpp/"/>
    
      <category term="asio" scheme="http://kingsamchen.github.io/tags/asio/"/>
    
      <category term="cmake" scheme="http://kingsamchen.github.io/tags/cmake/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in July 2019</title>
    <link href="http://kingsamchen.github.io/2019/08/04/monthly-read-posts-in-july-2019/"/>
    <id>http://kingsamchen.github.io/2019/08/04/monthly-read-posts-in-july-2019/</id>
    <published>2019-08-04T02:55:30.000Z</published>
    <updated>2019-08-04T03:11:52.310Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Programming-Languages&quot;&gt;&lt;a href=&quot;#Programming-Languages&quot; class=&quot;headerlink&quot; title=&quot;Programming Languages&quot;&gt;&lt;/a&gt;Programming
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="sync.pool" scheme="http://kingsamchen.github.io/tags/sync-pool/"/>
    
      <category term="quadratic residues" scheme="http://kingsamchen.github.io/tags/quadratic-residues/"/>
    
      <category term="reader-writer lock" scheme="http://kingsamchen.github.io/tags/reader-writer-lock/"/>
    
  </entry>
  
  <entry>
    <title>学习 MySQL 的一些吐槽</title>
    <link href="http://kingsamchen.github.io/2019/07/29/learning-mysql-rants/"/>
    <id>http://kingsamchen.github.io/2019/07/29/learning-mysql-rants/</id>
    <published>2019-07-29T11:56:44.000Z</published>
    <updated>2019-07-29T12:48:58.378Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近学习 MySQL 的过程中发现一些很坑的点，总结记录如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RDBMS 虽然理论很早就有了，但是近些年的实际应用进化已经导致各家独立。不同引擎实现不同，甚至连 spec 都不同。&lt;/li&gt;
&lt;li&gt;不考虑 Oracl, SQL Server
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="rant" scheme="http://kingsamchen.github.io/tags/rant/"/>
    
      <category term="mysql" scheme="http://kingsamchen.github.io/tags/mysql/"/>
    
      <category term="吐槽" scheme="http://kingsamchen.github.io/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in June 2019</title>
    <link href="http://kingsamchen.github.io/2019/07/21/monthly-read-posts-in-jun-2019/"/>
    <id>http://kingsamchen.github.io/2019/07/21/monthly-read-posts-in-jun-2019/</id>
    <published>2019-07-21T06:09:48.000Z</published>
    <updated>2019-07-21T06:11:06.142Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Concurrency&quot;&gt;&lt;a href=&quot;#Concurrency&quot; class=&quot;headerlink&quot; title=&quot;Concurrency&quot;&gt;&lt;/a&gt;Concurrency&lt;/h2&gt;&lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="golang" scheme="http://kingsamchen.github.io/tags/golang/"/>
    
      <category term="memory model" scheme="http://kingsamchen.github.io/tags/memory-model/"/>
    
  </entry>
  
  <entry>
    <title>实现 compressed pair</title>
    <link href="http://kingsamchen.github.io/2019/06/30/implementing-compressed-pair/"/>
    <id>http://kingsamchen.github.io/2019/06/30/implementing-compressed-pair/</id>
    <published>2019-06-30T09:58:25.000Z</published>
    <updated>2019-06-30T10:29:47.882Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;C++ 的 &lt;code&gt;std::unique_ptr&lt;/code&gt; 有个神奇的特性：如果使用默认的 deleter（即使用 &lt;code&gt;operator delete&lt;/code&gt;），或者 non-capturing lambda 作为 deleter，则有&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::unique&amp;lt;T&amp;gt;) == &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即整个对象的内存布局和 trivial pointer 一致，没有额外的开销。&lt;/p&gt;
&lt;p&gt;这个特性的背后就是 compress-pair；这个设施能够在某个元素是一个 empty class 时避免为其分配内存。&lt;/p&gt;
&lt;p&gt;注：这里假设你知道什么是 EBO，以及为什么会有 EBO。&lt;/p&gt;
&lt;p&gt;这里自己动手实现一个 compressed pair：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; Tx, &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; Ty, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::is_empty&amp;lt;Tx&amp;gt;::value&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct CompressedPair : Tx &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Ty second;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CompressedPair&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T&amp;amp;&amp;amp; t)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        : Tx(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          second(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::forward&amp;lt;T&amp;gt;(t))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; U&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CompressedPair(T&amp;amp;&amp;amp; t, U&amp;amp;&amp;amp; u)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        : Tx(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::forward&amp;lt;T&amp;gt;(t)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          second(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::forward&amp;lt;U&amp;gt;(u))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Tx&amp;amp; &lt;span class=&quot;title&quot;&gt;get_first&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Tx&amp;amp; &lt;span class=&quot;title&quot;&gt;get_first&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; Tx, &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; Ty&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CompressedPair&lt;/span&gt;&amp;lt;Tx, Ty, false&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Tx first;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Ty second;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; U&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CompressedPair(T&amp;amp;&amp;amp; t, U&amp;amp;&amp;amp; u)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        : first(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::forward&amp;lt;T&amp;gt;(t)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          second(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::forward&amp;lt;U&amp;gt;(u))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Tx&amp;amp; &lt;span class=&quot;title&quot;&gt;get_first&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; first;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Tx&amp;amp; &lt;span class=&quot;title&quot;&gt;get_first&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; first;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为 EBO 是实现的核心，而父类的构造顺序先于子类的任何成员，上面将 &lt;code&gt;Tx&lt;/code&gt; 作为可被优化的成员。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="ebo" scheme="http://kingsamchen.github.io/tags/ebo/"/>
    
      <category term="unique_ptr" scheme="http://kingsamchen.github.io/tags/unique-ptr/"/>
    
      <category term="optimization" scheme="http://kingsamchen.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>为 CommandLine 加上值指定类型转换以及一些扯淡</title>
    <link href="http://kingsamchen.github.io/2019/06/23/add-value-type-conversion-for-cmdline/"/>
    <id>http://kingsamchen.github.io/2019/06/23/add-value-type-conversion-for-cmdline/</id>
    <published>2019-06-23T06:56:22.000Z</published>
    <updated>2019-06-23T07:42:04.604Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;过去两周抽了点时间给 &lt;code&gt;KBase::CommandLine&lt;/code&gt; 做了一个&lt;a
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="KBase" scheme="http://kingsamchen.github.io/tags/KBase/"/>
    
      <category term="command-line" scheme="http://kingsamchen.github.io/tags/command-line/"/>
    
      <category term="abstraction" scheme="http://kingsamchen.github.io/tags/abstraction/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in May 2019</title>
    <link href="http://kingsamchen.github.io/2019/06/02/monthly-read-posts-in-may-2019/"/>
    <id>http://kingsamchen.github.io/2019/06/02/monthly-read-posts-in-may-2019/</id>
    <published>2019-06-02T13:40:29.000Z</published>
    <updated>2019-06-02T13:42:29.575Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Concurrency&quot;&gt;&lt;a href=&quot;#Concurrency&quot; class=&quot;headerlink&quot; title=&quot;Concurrency&quot;&gt;&lt;/a&gt;Concurrency&lt;/h2&gt;&lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="mutex" scheme="http://kingsamchen.github.io/tags/mutex/"/>
    
      <category term="lockless" scheme="http://kingsamchen.github.io/tags/lockless/"/>
    
      <category term="memory reordering" scheme="http://kingsamchen.github.io/tags/memory-reordering/"/>
    
      <category term="circuit breaker" scheme="http://kingsamchen.github.io/tags/circuit-breaker/"/>
    
  </entry>
  
  <entry>
    <title>基于 semaphore 实现轻量级 mutex</title>
    <link href="http://kingsamchen.github.io/2019/05/12/roll-your-own-light-weight-mutex/"/>
    <id>http://kingsamchen.github.io/2019/05/12/roll-your-own-light-weight-mutex/</id>
    <published>2019-05-12T12:10:37.000Z</published>
    <updated>2019-05-12T12:45:05.158Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;核心是 Jeff Preshing 大牛的两篇文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://preshing.com/20120226/roll-your-own-lightweight-mutex/&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="mutex" scheme="http://kingsamchen.github.io/tags/mutex/"/>
    
      <category term="multithreading" scheme="http://kingsamchen.github.io/tags/multithreading/"/>
    
      <category term="synchronization" scheme="http://kingsamchen.github.io/tags/synchronization/"/>
    
      <category term="semaphore" scheme="http://kingsamchen.github.io/tags/semaphore/"/>
    
  </entry>
  
  <entry>
    <title>Anvil -- An Assistant For You CMake</title>
    <link href="http://kingsamchen.github.io/2019/05/04/anvil-for-assisting-your-cmake/"/>
    <id>http://kingsamchen.github.io/2019/05/04/anvil-for-assisting-your-cmake/</id>
    <published>2019-05-04T13:12:05.000Z</published>
    <updated>2019-05-11T03:07:31.694Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h3&gt;&lt;p&gt;前段时间专门抽空做了一个小工具，也就是这里要讲的主题：&lt;a href=&quot;https://github.com/kingsamchen/anvil&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;anvil&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一开始做 anvil 的动力很简单：某次尝试体验一下 Linux SignalFD 功能时想直接使用 ezio 的 &lt;code&gt;EventLoop&lt;/code&gt; 作为基础事件循环，同时项目使用 cmake 管理。&lt;/p&gt;
&lt;p&gt;为了省事，我直接从 ezio 的项目里抠出来 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 和几个自己写的 &lt;code&gt;.cmake&lt;/code&gt; 文件，就地&lt;a href=&quot;https://github.com/kingsamchen/Eureka/tree/master/UsingSignalfd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;修改&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但事实证明哪怕这样，改动量也不小，原因大体是因为：cmake 里（非函数内定义的）变量作用域是全局的，通过 fetch-content 功能引入的依赖在 &lt;code&gt;add_subdirectory()&lt;/code&gt; 后的模块里也能看到上一层定义的变量，因此为了防止一些控制型变量发生冲突，我都在前面加上了对应的模块前缀。&lt;/p&gt;
&lt;p&gt;所以我面对的就是一大坨变量名的更换，以及少部分声明/属性的调整。&lt;/p&gt;
&lt;p&gt;考虑到大部分的文件内容都是可以模板化的，而手动“实例化”不仅费事还很容易出错，所以我就很自然地萌生了写一个工具自动化这个过程的想法。&lt;/p&gt;
&lt;h3 id=&quot;0x01&quot;&gt;&lt;a href=&quot;#0x01&quot; class=&quot;headerlink&quot; title=&quot;0x01&quot;&gt;&lt;/a&gt;0x01&lt;/h3&gt;&lt;p&gt;在经过一两天的短暂思考后，我大致确定了这个工具的定位和需要实现的基本目标，总结起来有三个核心点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;辅助 cmake 而不是试图替代它或深度封装&lt;/li&gt;
&lt;li&gt;内建一个轻量型的依赖管理功能&lt;/li&gt;
&lt;li&gt;配置化的生成 &amp;amp; 构建流程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先，第一点是重中之重。&lt;br&gt;
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="cpp" scheme="http://kingsamchen.github.io/tags/cpp/"/>
    
      <category term="cmake" scheme="http://kingsamchen.github.io/tags/cmake/"/>
    
      <category term="anvil" scheme="http://kingsamchen.github.io/tags/anvil/"/>
    
      <category term="project management" scheme="http://kingsamchen.github.io/tags/project-management/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in Apr 2019</title>
    <link href="http://kingsamchen.github.io/2019/05/02/monthly-read-posts-in-apr-2019/"/>
    <id>http://kingsamchen.github.io/2019/05/02/monthly-read-posts-in-apr-2019/</id>
    <published>2019-05-02T14:57:13.000Z</published>
    <updated>2019-05-02T15:02:53.654Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Programming-Languages&quot;&gt;&lt;a href=&quot;#Programming-Languages&quot; class=&quot;headerlink&quot; title=&quot;Programming Languages&quot;&gt;&lt;/a&gt;Programming Languages&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://akrzemi1.wordpress.com/2011/09/21/destructors-that-throw/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Destructors that throw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C++ 11之后的 destructor 默认是 &lt;code&gt;noexcept&lt;/code&gt;，如果有 active exception 逃逸出 dtor 会直接触发 &lt;code&gt;std::terminate()&lt;/code&gt;，即使外部有 catch handler。可以用 &lt;code&gt;noexcept(false)&lt;/code&gt; 显式关闭。&lt;/p&gt;
&lt;p&gt;因为 stack unwinding 是可以嵌套的，一个精心设计的场合下（见文中例子），可以做到多个 active exception 不在一个层次里，因此也不会触发 double-exception situation。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://akrzemi1.wordpress.com/2011/09/28/who-calls-stdterminate/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Who calls std::terminate?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;an exception leaves out from main function&lt;/p&gt;
&lt;p&gt;an exception leaves out from initial function of a thread&lt;/p&gt;
&lt;p&gt;an exception leaves out from dtor (since c++ 11 with noexcept guarantee)&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="cpp" scheme="http://kingsamchen.github.io/tags/cpp/"/>
    
      <category term="golang" scheme="http://kingsamchen.github.io/tags/golang/"/>
    
      <category term="noexcept" scheme="http://kingsamchen.github.io/tags/noexcept/"/>
    
      <category term="gc" scheme="http://kingsamchen.github.io/tags/gc/"/>
    
      <category term="mutex" scheme="http://kingsamchen.github.io/tags/mutex/"/>
    
      <category term="syscall" scheme="http://kingsamchen.github.io/tags/syscall/"/>
    
  </entry>
  
  <entry>
    <title>Write Your Own DNS Query</title>
    <link href="http://kingsamchen.github.io/2019/04/13/write-your-own-dns-query/"/>
    <id>http://kingsamchen.github.io/2019/04/13/write-your-own-dns-query/</id>
    <published>2019-04-13T02:49:01.000Z</published>
    <updated>2019-04-13T09:04:12.033Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;大部分人应该都知道 DNS 协议，以及它的用处。但是考虑过自己动手写 DNS message transmission 的应该不占多数。&lt;/p&gt;
&lt;p&gt;我们不妨考虑如何自己实现一个简单的 DNS client，完成基本的 domain name query and response parsing。&lt;/p&gt;
&lt;p&gt;因为 DNS 协议通常使用 UDP 作为其传输层协议，而且数据包是二进制包，所以实现一个这样简单的 demo 考虑用 golang 可能会省事儿不少。&lt;/p&gt;
&lt;h3 id=&quot;DNS-Message-Format&quot;&gt;&lt;a href=&quot;#DNS-Message-Format&quot; class=&quot;headerlink&quot; title=&quot;DNS Message Format&quot;&gt;&lt;/a&gt;DNS Message Format&lt;/h3&gt;&lt;p&gt;大体上 DNS 不是一个复杂的协议（虽然各类坑实在不少），所有的消息，不管是 query 还是 reply，都共享一个消息格式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|        Header       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|       Question      | the question for the name server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|        Answer       | Resource Records (RRs) answering the question&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|      Authority      | RRs pointing toward an authority&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|      Additional     | RRs holding additional information&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Header：消息头，包含一些参数、标志位&lt;/li&gt;
&lt;li&gt;Question：包含 query 的信息，例如需要查询的 domain&lt;/li&gt;
&lt;li&gt;Answer：reply 的信息&lt;/li&gt;
&lt;li&gt;Authority：如果有信息，则表明应答的服务器是 ultimate authority server。别忘了 DNS 服务器是树形结构，通常终端用户查询的 DNS 服务器都是 local DNS server。&lt;/li&gt;
&lt;li&gt;Additional：服务器传回的一些额外数据，非用户显式需要的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于一个 query message，&lt;code&gt;Answer&lt;/code&gt; section 是空的；而对于一个 reply message，&lt;code&gt;Question&lt;/code&gt; 保存着对应 query 的数据。&lt;/p&gt;
&lt;p&gt;一般而言，终端设备收到的 reply 消息里，&lt;code&gt;Authority&lt;/code&gt; 和 &lt;code&gt;Additional&lt;/code&gt; 是空的。所以下面会跳过这两个 section 的描述。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="golang" scheme="http://kingsamchen.github.io/tags/golang/"/>
    
      <category term="dns" scheme="http://kingsamchen.github.io/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>统一 ezio Buffer 的算术类型读写接口</title>
    <link href="http://kingsamchen.github.io/2019/04/07/unify-ezio-buffer-read-and-write-functions-for-arithmetic-types/"/>
    <id>http://kingsamchen.github.io/2019/04/07/unify-ezio-buffer-read-and-write-functions-for-arithmetic-types/</id>
    <published>2019-04-07T12:40:11.000Z</published>
    <updated>2019-04-13T02:48:22.102Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;ezio Buffer 一开始的时候只为 read, write 和 peek 提供了从 &lt;code&gt;int8_t&lt;/code&gt; 到 &lt;code&gt;int64_t&lt;/code&gt; 的函数重载，如果需要处理 unsigned integers，那么就需要自己额外做 &lt;code&gt;static_cast&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;ezio 的主要客户&lt;a href=&quot;https://github.com/oceancx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;藏心&lt;/a&gt;同学早前抱怨过这个问题，并且同时建议我加上对 &lt;code&gt;float/double&lt;/code&gt; 的浮点数支持。&lt;/p&gt;
&lt;p&gt;对于这个建议我一开始是抵触的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己 cast 又不是不能用，额外加重载支持三个操作工作量都要翻一番呢&lt;/li&gt;
&lt;li&gt;浮点数的 binary serialization 本来就是很难跨平台的，不是每个环境都（虽然大部分）要求使用 IEEE 754 spec。如果真的需要直接把浮点数存到网络包里，自己直接操作 underlying binary layout 不就好了…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是藏心同学一开始开的 issue 我一直没理他，于是最后他自己关掉了…&lt;/p&gt;
&lt;p&gt;等到我自己动手写一个 socks4a proxy 的时候我发现，自己 cast 真的是…太蛋疼了…而且代码看上去还非常丑，大面积的 &lt;code&gt;static_cast&lt;/code&gt; 制造了相当一部分内容噪音。那会儿我大概有点理解藏心同学的内心感受。&lt;/p&gt;
&lt;p&gt;于是我思考良久，打算改造 Buffer 的这部分接口，以支持绝大多数 integer types，顺带也增加入 floating piont types 的支持，这样 read, write, peek 就基本支持了绝大多数 arithmetic types。&lt;/p&gt;
&lt;p&gt;通过直接增加重载是我极力避免的，因为除了接口签名外，大部分实现几乎是一样的，不外乎：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是单字节，直接写/读操作&lt;/li&gt;
&lt;li&gt;如果是多字节，首先字节序转换，然后做写/读操作&lt;/li&gt;
&lt;li&gt;如果是浮点数，首先按照对应字节大小的整数类型&lt;strong&gt;解释&lt;/strong&gt;内存，然后参考普通整数的处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是自然而然的想到直接将函数做成 function templates 来增强语义。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="cpp" scheme="http://kingsamchen.github.io/tags/cpp/"/>
    
      <category term="SFINAE" scheme="http://kingsamchen.github.io/tags/SFINAE/"/>
    
      <category term="template" scheme="http://kingsamchen.github.io/tags/template/"/>
    
      <category term="ezio" scheme="http://kingsamchen.github.io/tags/ezio/"/>
    
  </entry>
  
</feed>
