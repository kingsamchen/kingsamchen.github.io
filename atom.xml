<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KC的废墟堆</title>
  
  <subtitle>Will you serve in Heaven, or rule in Hell</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kingsamchen.github.io/"/>
  <updated>2022-04-10T16:09:07.780Z</updated>
  <id>http://kingsamchen.github.io/</id>
  
  <author>
    <name>Kingsley Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一周杂记 in Week 1 Apr 2022</title>
    <link href="http://kingsamchen.github.io/2022/04/10/weekly-2022-apr-1/"/>
    <id>http://kingsamchen.github.io/2022/04/10/weekly-2022-apr-1/</id>
    <published>2022-04-10T14:52:21.000Z</published>
    <updated>2022-04-10T16:09:07.780Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Life&quot;&gt;&lt;a href=&quot;#Life&quot; class=&quot;headerlink&quot; title=&quot;Life&quot;&gt;&lt;/a&gt;Life&lt;/h2&gt;&lt;p&gt;本周掺杂了一个清明假期，节后三天工作日还算恰到好处，没有太明显的假期综合症。&lt;/p&gt;
&lt;p&gt;#1&lt;/p&gt;
&lt;p&gt;电影上看了
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="杂记" scheme="http://kingsamchen.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一周杂记 in Week 5 Mar 2022</title>
    <link href="http://kingsamchen.github.io/2022/03/29/weekly-2022-mar-5/"/>
    <id>http://kingsamchen.github.io/2022/03/29/weekly-2022-mar-5/</id>
    <published>2022-03-29T07:52:21.000Z</published>
    <updated>2022-04-05T06:16:33.659Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Life&quot;&gt;&lt;a href=&quot;#Life&quot; class=&quot;headerlink&quot; title=&quot;Life&quot;&gt;&lt;/a&gt;Life&lt;/h2&gt;&lt;p&gt;#1&lt;/p&gt;
&lt;p&gt;本周是清明假前的最后一周，要上6天班。周二的时候把去年遗留的一天年假用了，结果到了周三 3/30
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="杂记" scheme="http://kingsamchen.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一周杂记 in Week 4 Mar 2022</title>
    <link href="http://kingsamchen.github.io/2022/03/27/weekly-2022-mar-4/"/>
    <id>http://kingsamchen.github.io/2022/03/27/weekly-2022-mar-4/</id>
    <published>2022-03-27T13:24:19.000Z</published>
    <updated>2022-03-27T15:49:04.470Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Life&quot;&gt;&lt;a href=&quot;#Life&quot; class=&quot;headerlink&quot; title=&quot;Life&quot;&gt;&lt;/a&gt;Life&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;本周看了三部电影：&lt;em&gt;Cruella&lt;/em&gt;, &lt;em&gt;Sully&lt;/em&gt; and &lt;em&gt;The
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="杂记" scheme="http://kingsamchen.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一周杂记 in Week 3 Mar 2022</title>
    <link href="http://kingsamchen.github.io/2022/03/20/weekly-2022-mar-3/"/>
    <id>http://kingsamchen.github.io/2022/03/20/weekly-2022-mar-3/</id>
    <published>2022-03-20T12:57:09.000Z</published>
    <updated>2022-03-27T12:19:36.552Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;感觉这周时间过得特别快。&lt;/p&gt;
&lt;h2 id=&quot;Life&quot;&gt;&lt;a href=&quot;#Life&quot; class=&quot;headerlink&quot; title=&quot;Life&quot;&gt;&lt;/a&gt;Life&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;周六去医院打了最后一针狂犬疫苗，只要疫苗是真的有效，那么至少 1-2
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="杂记" scheme="http://kingsamchen.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一周杂记 in Week 2 Mar 2022</title>
    <link href="http://kingsamchen.github.io/2022/03/13/weekly-2022-mar-2/"/>
    <id>http://kingsamchen.github.io/2022/03/13/weekly-2022-mar-2/</id>
    <published>2022-03-13T15:22:57.000Z</published>
    <updated>2022-03-13T16:21:34.545Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Life&quot;&gt;&lt;a href=&quot;#Life&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="杂记" scheme="http://kingsamchen.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一周杂记 in Week 1 Mar 2022</title>
    <link href="http://kingsamchen.github.io/2022/03/06/weekly-2022-mar-1/"/>
    <id>http://kingsamchen.github.io/2022/03/06/weekly-2022-mar-1/</id>
    <published>2022-03-06T15:37:29.000Z</published>
    <updated>2022-03-06T16:43:35.425Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Life&quot;&gt;&lt;a href=&quot;#Life&quot; class=&quot;headerlink&quot; title=&quot;Life&quot;&gt;&lt;/a&gt;Life&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这周沉迷 The Witcher
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="杂记" scheme="http://kingsamchen.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一周杂记 in Week 4 Feb 2022</title>
    <link href="http://kingsamchen.github.io/2022/02/24/weekly-2022-feb-4/"/>
    <id>http://kingsamchen.github.io/2022/02/24/weekly-2022-feb-4/</id>
    <published>2022-02-24T14:42:33.000Z</published>
    <updated>2022-02-27T15:11:20.609Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Life&quot;&gt;&lt;a href=&quot;#Life&quot; class=&quot;headerlink&quot; title=&quot;Life&quot;&gt;&lt;/a&gt;Life&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;刷完了 The Expanse
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="杂记" scheme="http://kingsamchen.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一周杂记 in Week 3 Feb 2022</title>
    <link href="http://kingsamchen.github.io/2022/02/20/weekly-2022-feb-3/"/>
    <id>http://kingsamchen.github.io/2022/02/20/weekly-2022-feb-3/</id>
    <published>2022-02-20T15:41:06.000Z</published>
    <updated>2022-02-20T16:21:39.645Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;节后第二周，生活和工作节奏都慢慢恢复到了之前的状态。&lt;/p&gt;
&lt;h2 id=&quot;Life&quot;&gt;&lt;a href=&quot;#Life&quot; class=&quot;headerlink&quot; title=&quot;Life&quot;&gt;&lt;/a&gt;Life&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一口气刷了好几集 The Expanse
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="杂记" scheme="http://kingsamchen.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一周杂记 in Week 2 Feb 2022</title>
    <link href="http://kingsamchen.github.io/2022/02/13/weekly-2022-feb-2/"/>
    <id>http://kingsamchen.github.io/2022/02/13/weekly-2022-feb-2/</id>
    <published>2022-02-13T15:11:31.000Z</published>
    <updated>2022-02-13T16:08:15.491Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Blog 从上次更新到现在至少荒几个月。一直没更新主要是太懒了并且没有想到有什么需要特别写的。&lt;/p&gt;
&lt;p&gt;春节休假期间偶尔反思了一下觉得还是需要日常回顾自省一下，就算没有什么新的体会或者收获，当 journal 留着万一哪天得了阿兹海默症没准还能起到正向作用
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="杂记" scheme="http://kingsamchen.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>unique_ptr For Generic Scoped Handle</title>
    <link href="http://kingsamchen.github.io/2021/11/09/unique-ptr-for-generic-scoped-handle/"/>
    <id>http://kingsamchen.github.io/2021/11/09/unique-ptr-for-generic-scoped-handle/</id>
    <published>2021-11-09T14:43:31.000Z</published>
    <updated>2021-11-10T13:58:50.776Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前在 &lt;a href=&quot;/2021/06/14/wrap-win32-handle-into-unique-ptr/&quot; title=&quot;用 unique_ptr 管理 Windows HANDLE&quot;&gt;用 unique_ptr 管理 Windows HANDLE&lt;/a&gt; 中介绍了如何基于 &lt;code&gt;std::unique_ptr&lt;/code&gt; 快速实现对 Windows HANDLE 的 RAII 化。&lt;/p&gt;
&lt;p&gt;但是如果我们也要对 &lt;code&gt;fd&lt;/code&gt; 或者 Windows 上的 &lt;code&gt;SOCKET&lt;/code&gt; 做类似的处理，重复实现 &lt;code&gt;xx_handle&lt;/code&gt; 和 &lt;code&gt;xx_handle_deleter&lt;/code&gt; 就显得过于琐碎。&lt;/p&gt;
&lt;p&gt;实际上我们可以利用模板参数注入，将共同点抽象出来，不同点实现成各自的 type traits，然后利用模板进行注入。&lt;/p&gt;
&lt;p&gt;这样一来，我们只需要简单实现每个 handle type 对应的基础属性，就可以直接复用核心实现。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; Traits&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle_ptr&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; handle_type = &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; Traits::handle_type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    handle_ptr() &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// implicit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    handle_ptr(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;keyword&quot;&gt;nullptr_t&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// implicit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    handle_ptr(handle_type handle) &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        : handle_(handle) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ~handle_ptr() = &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Traits::is_valid(handle_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// implicit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle_type&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; handle_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;friend&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;==(handle_ptr lhs, handle_ptr rhs) &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lhs.handle_ == rhs.handle_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;friend&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;!=(handle_ptr lhs, handle_ptr rhs) &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !(lhs == rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    handle_type handle_&amp;#123;Traits::null_handle&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; Traits&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle_ptr_deleter&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; pointer = handle_ptr&amp;lt;Traits&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pointer ptr)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Traits::close(ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS：不同于文章中的例子，基底类起名 &lt;code&gt;handle_ptr&lt;/code&gt; 更为确切；因为在 &lt;code&gt;unique_ptr&lt;/code&gt; 的内部会用来定义 &lt;code&gt;pointer&lt;/code&gt;；而几乎 unique_ptr 的语义行为都是围绕 &lt;code&gt;pointer&lt;/code&gt; 来完成的。&lt;/p&gt;
&lt;p&gt;有了上面这个基底之后，针对 fd-wrapper，我们只需要&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fd_traits&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; handle_type = &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(handle_type handle)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; handle != null_handle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(handle_type handle)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ::close(handle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;constexpr&lt;/span&gt; handle_type null_handle&amp;#123;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; fd_deleter = handle_ptr_deleter&amp;lt;fd_traits&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; unique_fd = &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;unique_ptr&lt;/span&gt;&amp;lt;fd_traits::handle_type, fd_deleter&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; unique_fd &lt;span class=&quot;title&quot;&gt;wrap_unique_fd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; raw_fd)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unique_fd(raw_fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样一来，实现一个新的 unique handle wrapper，我们只需要确定四个东西：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;handle type 的实际类型&lt;/li&gt;
&lt;li&gt;null handle 的值，用来确定 default/zero initialized 之后 handle 状态&lt;/li&gt;
&lt;li&gt;实现 &lt;code&gt;is_valid()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;实现 &lt;code&gt;close()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;剩下的就是常规的类型实例化。&lt;/p&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="cpp" scheme="http://kingsamchen.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>(Ab)use system_error exception for System Calls</title>
    <link href="http://kingsamchen.github.io/2021/10/17/abuse-system-error-exception-for-system-calls/"/>
    <id>http://kingsamchen.github.io/2021/10/17/abuse-system-error-exception-for-system-calls/</id>
    <published>2021-10-17T13:31:34.000Z</published>
    <updated>2021-10-17T15:54:44.575Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;C++ 11 引入了没有掀起什么波澜的 &lt;a href=&quot;https://en.cppreference.com/w/cpp/error/error_code&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;std::error_code&lt;/a&gt; 和几乎没收到什么关注的 &lt;a href=&quot;https://en.cppreference.com/w/cpp/error/system_error&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;std::system_error&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;偶然发现后者可以用来做针对 system calls 的异常汇报处理。&lt;/p&gt;
&lt;h3 id=&quot;0x0-A-Traditional-Approach&quot;&gt;&lt;a href=&quot;#0x0-A-Traditional-Approach&quot; class=&quot;headerlink&quot; title=&quot;0x0 A Traditional Approach&quot;&gt;&lt;/a&gt;0x0 A Traditional Approach&lt;/h3&gt;&lt;p&gt;Win32 API 调用失败后具体的错误码可以通过 &lt;code&gt;::GetLastError()&lt;/code&gt; 获取；Linux 上 syscall 的错误码则用更 C-ish 的 &lt;code&gt;errno&lt;/code&gt; 获取。&lt;/p&gt;
&lt;p&gt;如果希望通过异常来汇报这些系统调用失败，那么通常会从 &lt;code&gt;std::runtime_error&lt;/code&gt; 继承出一个 exception class，额外包含系统调用的错误码。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;win_last_error&lt;/span&gt; :&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::runtime_error &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; error_code_type = &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;win_last_error&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* msg)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        : runtime_error(msg),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          error_code_(::GetLastError()) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[nodiscard]] &lt;span class=&quot;function&quot;&gt;error_code_type &lt;span class=&quot;title&quot;&gt;error_code&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; error_code_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error_code_type error_code_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码稍加处理后可以同时支持 &lt;code&gt;GetLastError()&lt;/code&gt; 和 &lt;code&gt;errno&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x1-Using-std-system-error&quot;&gt;&lt;a href=&quot;#0x1-Using-std-system-error&quot; class=&quot;headerlink&quot; title=&quot;0x1 Using std::system_error&quot;&gt;&lt;/a&gt;0x1 Using std::system_error&lt;/h3&gt;&lt;p&gt;&lt;code&gt;std::system_error&lt;/code&gt; 恰好也是一个和 system facilities 有关的异常类，汇报系统相关的错误。&lt;/p&gt;
&lt;p&gt;除了传统的 &lt;code&gt;what()&lt;/code&gt; 之外它还提供一个 &lt;code&gt;code()&lt;/code&gt; 函数返回对应的 &lt;code&gt;error_code&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;std::error_code&lt;/code&gt; 可以通过指定不同的 category 来指示其包含的错误码语义。&lt;/p&gt;
&lt;p&gt;所以实际上我们可以这么用：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; pipe &lt;span class=&quot;title&quot;&gt;make_pipe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; defined(OS_WIN)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (::CreatePipe(&amp;amp;fds[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], &amp;amp;fds[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &amp;amp;sa, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::system_error(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::error_code(::GetLastError(), &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::system_category()),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;string&quot;&gt;&quot;CreatePipe() failure&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (::pipe(fds) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::system_error(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::error_code(errno, &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::system_category()),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;string&quot;&gt;&quot;pipe() failure&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意这里使用的 &lt;code&gt;system_category()&lt;/code&gt;，它代表 error code 是 reported by the system.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;有些地方可能会说这里要使用 &lt;code&gt;std::generic_category&lt;/code&gt;；但是通过试验发现使用 &lt;code&gt;std::generic_category&lt;/code&gt; 的 Windows last-error 和 &lt;code&gt;ec.message()&lt;/code&gt; 是对不上的；而 &lt;code&gt;std::system_category()&lt;/code&gt; 则是正确的。&lt;/p&gt;
&lt;p&gt;猜测 generic category 可能针对的是 CRT 的错误码&lt;/p&gt;
&lt;h3 id=&quot;0x2-Q-amp-A&quot;&gt;&lt;a href=&quot;#0x2-Q-amp-A&quot; class=&quot;headerlink&quot; title=&quot;0x2 Q&amp;amp;A&quot;&gt;&lt;/a&gt;0x2 Q&amp;amp;A&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Q: error_code 是啥？&lt;/strong&gt;&lt;br&gt;A: 这玩意儿实际上是 ASIO 的作者针对 async-handler 的错误处理设计的；boost 中 ASIO 和 filesystem 都大量支持了它。&lt;/p&gt;
&lt;p&gt;但是这玩意儿的设计门槛有点高，以至于不看完几篇文章压根没法理解这东西的设计意图；导致除了 ASIO 和 filesystem 及他们相关的衍生 lib 之外都没啥人去用它。&lt;/p&gt;
&lt;p&gt;而 filesystem C++ 17 才进入标准；而 ASIO/network TS 几天前也差不多宣告死亡了…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q: 为啥要用异常？&lt;/strong&gt;&lt;br&gt;A: Why not？我不排斥使用异常，而且我觉得我写的东西还没关键到需要考虑目前异常实现带来的性能问题。&lt;/p&gt;
&lt;p&gt;并且我觉得 exception 在充满大量业务逻辑的应用层是非常优秀的错误处理机制。&lt;/p&gt;
&lt;p&gt;即使提供了支持 chaining operations 的 sum type（例如这个 &lt;a href=&quot;https://github.com/TartanLlama/expected&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;expected&lt;/a&gt;），在业务层基本也需要人肉实现 failure cascading 层层上抛。&lt;/p&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="cpp" scheme="http://kingsamchen.github.io/tags/cpp/"/>
    
      <category term="exception" scheme="http://kingsamchen.github.io/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>himsw - Hey I aM Still Working</title>
    <link href="http://kingsamchen.github.io/2021/10/10/himsw-hey-i-am-still-working/"/>
    <id>http://kingsamchen.github.io/2021/10/10/himsw-hey-i-am-still-working/</id>
    <published>2021-10-10T15:25:19.000Z</published>
    <updated>2021-10-10T15:48:58.962Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;因为公司的安全政策要求，公司发的笔记本会在5分钟没有操作后自动锁住当前账户，并且这是由预装的安全组件强制保证的。&lt;/p&gt;
&lt;p&gt;（不要想着可以把安全组件卸载或者禁用了，会被 IT 查水表的）&lt;/p&gt;
&lt;p&gt;有时候加着仓或者用手机看个新闻就超时锁屏了，总有种摸鱼被发现的感觉，不太好。&lt;/p&gt;
&lt;p&gt;更蛋疼的是，WFH 的时候只能用公司发的笔记本；而每次锁屏后都会导致 VPN 掉线需要重连，并且有概率会无法重连需要重置网卡….&lt;/p&gt;
&lt;p&gt;没办法只能自己写了个小工具，在3分钟没有操作后进入模拟工作状态，定时发送键盘按键消息；同时监听鼠标和键盘消息，如果出现人为操作，就退出模拟状态。&lt;/p&gt;
&lt;p&gt;经过一段时间的体验，基本实现了初衷，摸鱼再久也不会被发现了 😁&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;项目代码完全开源，可以在&lt;a href=&quot;https://github.com/kingsamchen/Eureka/tree/master/hey-i-am-still-working&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;查看&lt;/p&gt;
&lt;p&gt;核心就三点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用 &lt;code&gt;GetLastInputInfo()&lt;/code&gt; 获取程序上次获得输入的时间；用来判断 idle duration&lt;/li&gt;
&lt;li&gt;进入 simulation state 之后定时通过 &lt;code&gt;SendInput()&lt;/code&gt; 发送键盘事件；为了避免干扰，选择了 ScrollLock 这个按键&lt;/li&gt;
&lt;li&gt;利用键盘钩子和鼠标钩子监听全局的键盘/鼠标事件；有人为活动后，自动退出 simulation state&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为用到了系统的 API 所以目前只支持 Windows，估计也不好移植到其他平台。&lt;/p&gt;
&lt;p&gt;一开始 GUI 是用 nana 做的，后来发现如果要支持 tray icon 的消息处理还要自己对窗口做一遍 sub classing…&lt;/p&gt;
&lt;p&gt;索性弃用 nana 用 native win32 做了个 dialog，起码各种 message handling 会灵活一点。&lt;/p&gt;
&lt;p&gt;因为是自家用，所以也不提供功能选项定制啥的，毕竟用不到啊。&lt;/p&gt;
&lt;p&gt;最后再吐槽一下：我是真不喜欢做 UI&lt;/p&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="windows" scheme="http://kingsamchen.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Using Headless Chrome to Convert Offline HTML to PDF in Bulk</title>
    <link href="http://kingsamchen.github.io/2021/10/09/headless-chrome-for-converting-offline-htmls-to-pdf-in-bulk/"/>
    <id>http://kingsamchen.github.io/2021/10/09/headless-chrome-for-converting-offline-htmls-to-pdf-in-bulk/</id>
    <published>2021-10-09T08:16:00.000Z</published>
    <updated>2021-10-09T08:38:25.822Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;手里有一批某课程内容的教案但是都是导出的 HTML 文档，因为每次打开都会请求一堆的外部资源（比如JS），导致卡顿几秒钟。&lt;/p&gt;
&lt;p&gt;但是这是盗版资源 (shame on me) 所以这些外部请求完全是捣乱；于是想到批量转换为 PDF 就好了。&lt;/p&gt;
&lt;p&gt;一开始选择的是 wkhtmltopdf，但是 libpng 会因为源文件的 sRGB 不正确导致失败。看到有个 2017 年报的 issue 到现在还是 Open 状态，遂放弃。&lt;/p&gt;
&lt;p&gt;后来想到浏览器可以正常打开，也可以正常 print to pdf，那何不让浏览器批量处理？&lt;/p&gt;
&lt;p&gt;恰好 Chrome 支持 headless mode，结合简单的 powershell 就可以做到批量转换：&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$dest_dir&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;/your/dest/dir/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$src_files&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/your/src/dir/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$env:Path&lt;/span&gt; += &lt;span class=&quot;string&quot;&gt;&quot;;C:\Program Files (x86)\Google\Chrome\Application\&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$src_files&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$output_file&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt;.BaseName + &lt;span class=&quot;string&quot;&gt;&quot;.pdf&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$dest_file&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;Join-Path&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-Path&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$dest_dir&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-ChildPath&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$output_file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Write-Output&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Processing &lt;span class=&quot;variable&quot;&gt;$dest_file&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    chrome.exe -&lt;span class=&quot;literal&quot;&gt;-headless&lt;/span&gt; -&lt;span class=&quot;literal&quot;&gt;-disable&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-gpu&lt;/span&gt; -&lt;span class=&quot;literal&quot;&gt;-print&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-to&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-pdf&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-no&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-header&lt;/span&gt; -&lt;span class=&quot;literal&quot;&gt;-print&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-to&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-pdf&lt;/span&gt;=&lt;span class=&quot;variable&quot;&gt;$dest_file&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# a simple throttle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Start-Sleep&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Write-Output&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Congratulations!!!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每次调用都会创建一个 headless chrome 做转换，而一次转换大概需要十几秒；同时这个调用是启动 chrome 之后就立即返回的，并非等到转换结束。&lt;/p&gt;
&lt;p&gt;所以为了避免短时间内创建大量的 headless chrome 进程把系统资源耗死，这里简单的用 sleep 做一个节流器&lt;/p&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="headless" scheme="http://kingsamchen.github.io/tags/headless/"/>
    
      <category term="pdf" scheme="http://kingsamchen.github.io/tags/pdf/"/>
    
  </entry>
  
  <entry>
    <title>Postfix Policy Delegation</title>
    <link href="http://kingsamchen.github.io/2021/09/23/postfix-policy-delegation/"/>
    <id>http://kingsamchen.github.io/2021/09/23/postfix-policy-delegation/</id>
    <published>2021-09-23T15:01:24.000Z</published>
    <updated>2021-09-23T15:13:53.593Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;比较新的版本的 postfix 除了 milter 之外还可以用 &lt;a href=&quot;http://www.postfix.org/SMTPD_POLICY_README.html#client_config&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;policy delegation&lt;/a&gt; 做 content filtering；后者的优势在于简单容易实现，但是只能读取有限的 email attributes。&lt;/p&gt;
&lt;p&gt;policy delegation 实现上也有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于 tcp 的 policy server&lt;/li&gt;
&lt;li&gt;基于 unix domain socket 的 policy server&lt;/li&gt;
&lt;li&gt;基于 master daemon spawn 的 policy server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第三种实现上最简单，并且虽然文档上说它也是基于 unix domain socket 实现通信，但是这部分通信实际上对 policy server 是透明的。&lt;/p&gt;
&lt;p&gt;第三种情况下，只需要提供一个简单的 binary，能够读写 stdin/stdout 即可完成通信：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 stdin 读出 request attributes&lt;/li&gt;
&lt;li&gt;将判断结果往 stdout 写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文档上虽然没有明确写出这点，但是通过附带的 example 用例可以证实。&lt;/p&gt;
&lt;p&gt;不过使用这种方式要注意一个坑：stdin/stdout 的读写必须不能使用 &lt;code&gt;fread()/fwrite()&lt;/code&gt; &lt;code&gt;std::cin/std::cout&lt;/code&gt; 这种带有应用层缓存的 IO 设施。&lt;/p&gt;
&lt;p&gt;虽然这里是对 stdin/stdout 读写，但是实际上底下通讯还是会经过 unix domain socket，使用带应用层缓存的库函数读写时会导致阻塞。&lt;/p&gt;
&lt;p&gt;相应的，这里要么使用 &lt;code&gt;read(2)/write(2)&lt;/code&gt; 这种 syscall，要么手动屏蔽标准库的应用层缓存。&lt;/p&gt;
&lt;p&gt;对于没有经验的人来说，这里是一个很容易掉的坑&lt;/p&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="mta" scheme="http://kingsamchen.github.io/tags/mta/"/>
    
      <category term="postfix" scheme="http://kingsamchen.github.io/tags/postfix/"/>
    
  </entry>
  
  <entry>
    <title>sa-update 和直率的 spamassassin</title>
    <link href="http://kingsamchen.github.io/2021/07/11/sa-update-and-the-blunt-spamassassin/"/>
    <id>http://kingsamchen.github.io/2021/07/11/sa-update-and-the-blunt-spamassassin/</id>
    <published>2021-07-11T08:38:00.000Z</published>
    <updated>2021-07-11T11:35:48.375Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;amavisd 是 MTA（例如 postfix）流行的 content-filtering 模块，可以提供垃圾邮件试别过滤、病毒邮件检测隔离等功能。&lt;/p&gt;
&lt;p&gt;spamassassin 则是 amavisd 使用的垃圾邮件模块。&lt;/p&gt;
&lt;p&gt;在目前主流的 Linux 发行版上，这两个系统都会以 systemd 管理的服务运行。&lt;/p&gt;
&lt;p&gt;在系统集成过程中遇到一个神奇的问题：amavisd 和 spamassassin 服务会定期挂掉，&lt;code&gt;journalctl -fu&lt;/code&gt; 的日志都提到了&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;config: no rules were found! Do you need to run sa-update​?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;的错误内容&lt;/p&gt;
&lt;h2 id=&quot;处理&quot;&gt;&lt;a href=&quot;#处理&quot; class=&quot;headerlink&quot; title=&quot;处理&quot;&gt;&lt;/a&gt;处理&lt;/h2&gt;&lt;p&gt;解决步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查 &lt;code&gt;/var/lib/spamassassin/&lt;/code&gt; 目录下是否有一个对应版本的目录，例如 &lt;code&gt;3.00402&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果有的话，删除这个目录&lt;/li&gt;
&lt;li&gt;然后先后重启 spamassassin 和 amavisd 服务
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="amavisd" scheme="http://kingsamchen.github.io/tags/amavisd/"/>
    
      <category term="spamassassin" scheme="http://kingsamchen.github.io/tags/spamassassin/"/>
    
  </entry>
  
  <entry>
    <title>第二次跑路</title>
    <link href="http://kingsamchen.github.io/2021/07/04/quitting-from-my-last-job/"/>
    <id>http://kingsamchen.github.io/2021/07/04/quitting-from-my-last-job/</id>
    <published>2021-07-04T13:07:55.000Z</published>
    <updated>2021-07-04T15:29:14.078Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在阿哔呆了 1860 天（2016/04/11 –
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="扯淡" scheme="http://kingsamchen.github.io/tags/%E6%89%AF%E6%B7%A1/"/>
    
  </entry>
  
  <entry>
    <title>用 unique_ptr 管理 Windows HANDLE</title>
    <link href="http://kingsamchen.github.io/2021/06/14/wrap-win32-handle-into-unique-ptr/"/>
    <id>http://kingsamchen.github.io/2021/06/14/wrap-win32-handle-into-unique-ptr/</id>
    <published>2021-06-14T09:16:27.000Z</published>
    <updated>2021-06-14T10:03:29.439Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;作为一个曾经的资深 Windows developer，Windows &lt;code&gt;HANDLE&lt;/code&gt; 一个不引人注意的但是绝对值得引起注意的地方是，它的无效值表示是不唯一的。&lt;/p&gt;
&lt;p&gt;除了最常见的 &lt;code&gt;NULL&lt;/code&gt; 之外还有一个 &lt;code&gt;INVALID_HANDLE_VALUE&lt;/code&gt;，并且即使是在数值上这两个东西也不一样。&lt;/p&gt;
&lt;p&gt;如果要为 &lt;code&gt;HANDLE&lt;/code&gt; 写一个 C++ RAII Wrapper 那么必须要考虑这个点，比如 Chromium 就是&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/refs/heads/main/base/win/scoped_handle.h#116&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这么做的&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Chromium 的这个设施早在 C++ 11 之前就有了，并且经过多年来的迭代已经变得异常复杂；如果你自己需要这样一个东西，又无法从 Chromium 这种工业项目中抽取一个组件的话，只能考虑自己实现。&lt;/p&gt;
&lt;p&gt;但是要写对一个工业强度的 handle-wrapper 并不容易，同时还要考虑到通用性和实用性，比如可能后续要支持 fd/socket，Windows HDC 等各种奇奇怪怪的东西。&lt;/p&gt;
&lt;p&gt;所以能否用 &lt;code&gt;std::unique_ptr&lt;/code&gt; 来作为基础实现，针对一些特定细节做泛化？&lt;/p&gt;
&lt;p&gt;这就引出一个问题：如果希望用 &lt;code&gt;std::unique_ptr&lt;/code&gt; 来作为 &lt;code&gt;HANDLE&lt;/code&gt; 的一个 RAII 包装，如何正确判断一个 handle 是否 valid？&lt;/p&gt;
&lt;p&gt;更进一步，问题还可以变为：如何用 &lt;code&gt;std::unique_ptr&lt;/code&gt; 管理 pointer-like 的资源？&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="cpp" scheme="http://kingsamchen.github.io/tags/cpp/"/>
    
      <category term="unique_ptr" scheme="http://kingsamchen.github.io/tags/unique-ptr/"/>
    
  </entry>
  
  <entry>
    <title>一个符合 RFC-4122 的实现</title>
    <link href="http://kingsamchen.github.io/2021/05/15/uuidxx-a-rfc-compliant-implementation/"/>
    <id>http://kingsamchen.github.io/2021/05/15/uuidxx-a-rfc-compliant-implementation/</id>
    <published>2021-05-15T14:42:06.000Z</published>
    <updated>2021-05-15T15:17:31.683Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;系列第一篇文章里说后面会给出一个满足 RFC 4122 的可用实现，并且那会儿是打算讲一讲实现中一些需要注意的坑和有意思的点。&lt;/p&gt;
&lt;p&gt;但是因为3月份开始就忙着准备面试，清明结束后的两周基本不是在面试，就是在准备面试；一直到五一回了趟温州老家才有比较充裕的时间把 uuidxx 的核心逻辑写完。&lt;/p&gt;
&lt;p&gt;拉锯到现在一开始的冲动都已经被消磨得不剩下多少了（可能还是因为我比较懒），所以我不打算把具体的实现部分展开，有兴趣的可以自行查阅源代码。&lt;/p&gt;
&lt;p&gt;Repo 地址在 &lt;a href=&quot;https://github.com/kingsamchen/uuidxx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/kingsamchen/uuidxx&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;因为这次换工作我有很多槽点想吐，所以后面我会专门写一篇文章讲一讲。&lt;/p&gt;
&lt;p&gt;这篇应该不会鸽，毕竟喷人挺爽的一件事。&lt;/p&gt;
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="uuid" scheme="http://kingsamchen.github.io/tags/uuid/"/>
    
  </entry>
  
  <entry>
    <title>UUID 及其实现 3</title>
    <link href="http://kingsamchen.github.io/2021/03/07/uuid-and-its-implementations-3/"/>
    <id>http://kingsamchen.github.io/2021/03/07/uuid-and-its-implementations-3/</id>
    <published>2021-03-07T10:17:42.000Z</published>
    <updated>2021-03-07T12:09:27.372Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这一篇来讲 v3 和 v5 的实现。&lt;/p&gt;
&lt;p&gt;这两个实现要求使用方提供：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个称为 namespace 的 UUID&lt;/li&gt;
&lt;li&gt;一个叫 name 的数据块（不限于字符串）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后利用一个 hash 算法算得结果，作为目标 UUID 的基础数据（还需要额外设置 variant 和 version）。&lt;/p&gt;
&lt;p&gt;即，对于 v3/v5 的实现，本质上是&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uuid = hash(namespace, name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set_variant(uuid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set_version(uuid, ver)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;v3 和 v5 区别在于，前者是用 MD5，后者使用 SHA-1。&lt;/p&gt;
&lt;p&gt;并且可以发现，对于相同的 namespace 和 name，生成的结果 UUID 是一样的。&lt;/p&gt;
&lt;p&gt;这个就是 v3/v5 版本的特性。&lt;/p&gt;
&lt;p&gt;借用 RFC 的描述就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The UUIDs generated at different times from the same name in the same namespace MUST be equal.&lt;/li&gt;
&lt;li&gt;The UUIDs generated from two different names in the same namespace should be different (with very high probability).&lt;/li&gt;
&lt;li&gt;The UUIDs generated from the same name in two different namespaces should be different with (very high probability).&lt;/li&gt;
&lt;li&gt;If two UUIDs that were generated from names are equal, then they were generated from the same name in the same namespace (with very high probability).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以 v3/v5 的版本又被叫做 name-based implementation&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="uuid" scheme="http://kingsamchen.github.io/tags/uuid/"/>
    
  </entry>
  
  <entry>
    <title>UUID 及其实现 2</title>
    <link href="http://kingsamchen.github.io/2021/03/06/uuid-and-its-implementations-2/"/>
    <id>http://kingsamchen.github.io/2021/03/06/uuid-and-its-implementations-2/</id>
    <published>2021-03-06T03:33:30.000Z</published>
    <updated>2021-03-06T14:58:38.251Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;上篇介绍了 UUID 的格式和 v4 的实现，这篇讲 v1 &amp;amp; v2 的实现。&lt;/p&gt;
&lt;p&gt;v2 版本是 v1 上衍生出来的，而 v1 因为涉及到时间戳，又称为 time-based implementation。&lt;/p&gt;
&lt;h2 id=&quot;实现-UUID-v1&quot;&gt;&lt;a href=&quot;#实现-UUID-v1&quot; class=&quot;headerlink&quot; title=&quot;实现 UUID v1&quot;&gt;&lt;/a&gt;实现 UUID v1&lt;/h2&gt;&lt;p&gt;v1 除了常规的 variant 和 version 部份外，还涉及三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;timestamp，需要 60-bit 通常用 64-bit 容纳；非寻常的 Unix Timestamp&lt;/li&gt;
&lt;li&gt;clock sequence，需要 14-bit，通常用 16-bit 存储&lt;/li&gt;
&lt;li&gt;node identifier，48-bit 和设备相关&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面逐一解释这三个部分。&lt;/p&gt;
&lt;h3 id=&quot;0x0-UUID-Timestamp&quot;&gt;&lt;a href=&quot;#0x0-UUID-Timestamp&quot; class=&quot;headerlink&quot; title=&quot;0x0. UUID Timestamp&quot;&gt;&lt;/a&gt;0x0. UUID Timestamp&lt;/h3&gt;&lt;p&gt;和常见的 Unix 时间戳不同，UUID 时间戳记录的是，自 1582-10-15 00:00:00 至今的 100-ns 数。&lt;/p&gt;
&lt;p&gt;1582年10月15日的零点是&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/%E6%A0%BC%E9%87%8C%E6%9B%86&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;格里高力历&lt;/a&gt;开始的时间，这个时间也是 UUID Epoch Time。&lt;/p&gt;
&lt;p&gt;UUID 时间戳的分辨率（resolution）是 100 纳秒，即每 100ns 为一个 tick。&lt;/p&gt;
&lt;p&gt;现代编程语言都可以获取 unix 时间戳，因此可以先获取 unix 时间戳，然后加上两个 epoch time 的差值；这个差值是个定值，等于 &lt;code&gt;122192928000000000&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;注意：获取时间戳时需要注意系统或者语言库能提供的分辨率。&lt;/p&gt;
&lt;h3 id=&quot;0x1-Clock-Sequence&quot;&gt;&lt;a href=&quot;#0x1-Clock-Sequence&quot; class=&quot;headerlink&quot; title=&quot;0x1. Clock Sequence&quot;&gt;&lt;/a&gt;0x1. Clock Sequence&lt;/h3&gt;&lt;p&gt;因为引入了时间戳，所以存在可能由于时钟回拨、闰秒，甚至因为系统提供的时钟分辨率不够导致使用了重复的时间戳。&lt;/p&gt;
&lt;p&gt;另外 node identifier 也有可能被改变。&lt;/p&gt;
&lt;p&gt;所以为了尽可能保证 UUID 的唯一性，引入了 clock sequence。&lt;/p&gt;
&lt;p&gt;注：RFC 4122 没有规定 UUID v1 必须要使用 steady clock，所以使用能够被回拨的 system clock 也是允许的。另外，即使使用了 steady clock，机器在两次启动之间也可能调整了硬件时间，一样可能会导致回拨。&lt;/p&gt;
&lt;p&gt;Clock sequence 一开始会被初始化为一个随机值；之后如果某次获取 UUID 时间戳发现 &amp;lt;= 上一次的时间戳，就会自增 clock sequence。&lt;/p&gt;
&lt;p&gt;clock sequence 通常会设置为一个无符号数，以确保溢出 wrap-around 的行为是确定的。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="uuid" scheme="http://kingsamchen.github.io/tags/uuid/"/>
    
  </entry>
  
</feed>
