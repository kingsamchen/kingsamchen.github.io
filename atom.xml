<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KC的废墟堆</title>
  
  <subtitle>Will you serve in Heaven, or rule in Hell</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kingsamchen.github.io/"/>
  <updated>2018-07-01T14:58:30.894Z</updated>
  <id>http://kingsamchen.github.io/</id>
  
  <author>
    <name>Kingsley Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Monthly Read Posts in Jun 2018</title>
    <link href="http://kingsamchen.github.io/2018/07/01/monthly-read-posts-in-jun-2018/"/>
    <id>http://kingsamchen.github.io/2018/07/01/monthly-read-posts-in-jun-2018/</id>
    <published>2018-07-01T14:45:10.000Z</published>
    <updated>2018-07-01T14:58:30.894Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Programming-Language&quot;&gt;&lt;a href=&quot;#Programming-Language&quot; class=&quot;headerlink&quot; title=&quot;Programming Language&quot;&gt;&lt;/a&gt;Programming Language&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iLiDezv_Frk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CppCon 2015: Richard Powell “Intro to the C++ Object Model”
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本覆盖了 POD，无需函数类，单继承的情况，扫盲效果俱佳。&lt;/p&gt;
&lt;p&gt;至于为什么没有包含 multiple inheritance / virtual inheritance，作者说自己不是很 condifent with that。&lt;/p&gt;
&lt;p&gt;讲道理，MI / VI 在一般的设计里都会尽量避免，而且各种乱七八糟的 case 很多，这里不涉及反而是个正确的做法。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://akrzemi1.wordpress.com/2011/04/06/assertions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Assertions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，我很赞同文中作者对于 assertion 是 &lt;em&gt;guarantees given by the author of a piece of code to himself/herself&lt;/em&gt; 但是接下来的大部观点都不赞同。&lt;/p&gt;
&lt;p&gt;比如作者认为不应该 assert on precodintions &amp;amp; postconditions，因为 assertion 是 for implementation details，这个思路其实不对。&lt;/p&gt;
&lt;p&gt;关于 assertion，目前看过最好的阐述还是 &lt;a href=&quot;https://book.douban.com/subject/3406939/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing Solid Code&lt;/a&gt;，推荐去阅读这个。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://akrzemi1.wordpress.com/2011/05/06/compile-time-computations/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Compile-time computations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇 post 展示了 constexpr functions 错误报告的常见手段：抛异常。&lt;/p&gt;
&lt;p&gt;这个在之前的某个 cppcon talk 里有专门的介绍。&lt;/p&gt;
&lt;p&gt;另外，文中更进一步，抽出专门的 constexpr validation functions，并通过 comma operator 串联。&lt;/p&gt;
&lt;p&gt;C++ 14 支持多句之后，连 comma operatos 都可以免掉了。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="golang" scheme="http://kingsamchen.github.io/tags/golang/"/>
    
      <category term="epoll" scheme="http://kingsamchen.github.io/tags/epoll/"/>
    
      <category term="compile-time" scheme="http://kingsamchen.github.io/tags/compile-time/"/>
    
      <category term="assert" scheme="http://kingsamchen.github.io/tags/assert/"/>
    
      <category term="RVO" scheme="http://kingsamchen.github.io/tags/RVO/"/>
    
      <category term="functional" scheme="http://kingsamchen.github.io/tags/functional/"/>
    
      <category term="goroutine" scheme="http://kingsamchen.github.io/tags/goroutine/"/>
    
      <category term="threading model" scheme="http://kingsamchen.github.io/tags/threading-model/"/>
    
      <category term="select" scheme="http://kingsamchen.github.io/tags/select/"/>
    
      <category term="poll" scheme="http://kingsamchen.github.io/tags/poll/"/>
    
  </entry>
  
  <entry>
    <title>Modern CMake</title>
    <link href="http://kingsamchen.github.io/2018/06/19/modern-cmake/"/>
    <id>http://kingsamchen.github.io/2018/06/19/modern-cmake/</id>
    <published>2018-06-19T07:22:07.000Z</published>
    <updated>2018-07-01T14:38:13.754Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;但凡有点历史的东西，在演进到一个新的阶段时，总会总结一套新的 practices 然后冠之以 modern，例如 modern C++，还有今天的主题 —— modern CMake。&lt;/p&gt;
&lt;p&gt;上周花了一点时间稍微研究了一下所谓的 modern cmake，然后将
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="cmake" scheme="http://kingsamchen.github.io/tags/cmake/"/>
    
  </entry>
  
  <entry>
    <title>Build Your Own HTTP Proxy Server Using Go</title>
    <link href="http://kingsamchen.github.io/2018/06/10/build-your-own-http-proxy-using-go/"/>
    <id>http://kingsamchen.github.io/2018/06/10/build-your-own-http-proxy-using-go/</id>
    <published>2018-06-10T11:54:44.000Z</published>
    <updated>2018-06-10T13:56:53.568Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Go is a quite awesome programming language for building network applications. So I built my own HTTP proxy server using go last week.&lt;/p&gt;
&lt;p&gt;To grasp the essence of how HTTP proxy server works, I choosed to implement it on TCP transport layer, forwarding TCP traffic directly.&lt;/p&gt;
&lt;p&gt;Essentially, it runs a server, accepting incoming TCP connections and from which the server extracts target host of a request by parsing HTTP protocol messages. The server then establishes a connection to the target host, and finally operates as an intermedia, forwarding traffic from one host to another.&lt;/p&gt;
&lt;p&gt;Implementing a TCP server which is able to handle concurrent requests uing go is easier than you thought: just runs a loop to accept requests, launching a new goroutine for each new connection:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Server &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	addr     &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	listener net.Listener&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(srv *Server)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; err error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	srv.listener, err = net.Listen(&lt;span class=&quot;string&quot;&gt;&quot;tcp&quot;&lt;/span&gt;, srv.addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		log.Fatalf(&lt;span class=&quot;string&quot;&gt;&quot;Failed to listen at %s : %v&quot;&lt;/span&gt;, srv.addr, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	log.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Proxy is listening at %s&quot;&lt;/span&gt;, srv.addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	srv.runLoop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(srv *Server)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;runLoop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		conn, err := srv.listener.Accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			log.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Failed to accept an incoming connection : %v&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; srv.handleConnection(conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(srv *Server)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleConnection&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(conn net.Conn)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c := newConnection(conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c.serve()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="proxy" scheme="http://kingsamchen.github.io/tags/proxy/"/>
    
      <category term="http" scheme="http://kingsamchen.github.io/tags/http/"/>
    
      <category term="golang" scheme="http://kingsamchen.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in May 2018</title>
    <link href="http://kingsamchen.github.io/2018/06/01/monthly-read-posts-in-may-2018/"/>
    <id>http://kingsamchen.github.io/2018/06/01/monthly-read-posts-in-may-2018/</id>
    <published>2018-06-01T14:39:00.000Z</published>
    <updated>2018-06-01T14:43:08.903Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerlink&quot; title=&quot;Misc&quot;&gt;&lt;/a&gt;Misc&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;怎样花两年时间去面试一个人&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当前行业招聘的不靠谱，招揽优秀人员的难度大。&lt;/p&gt;
&lt;p&gt;脱颖而出的核心：良好的阅读习惯 + Github 项目&lt;/p&gt;
&lt;p&gt;这里说的两年是针对应届生来说的，对于已经工作的人来说，可以当作是虚指。&lt;/p&gt;
&lt;p&gt;不过文中提到的，拥抱变化的三个核心点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;触动内心的大象&lt;/li&gt;
&lt;li&gt;建立清晰明确的目标&lt;/li&gt;
&lt;li&gt;扫清前进道路的障碍&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;颇有道理。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://gulu-dev.com/post/2014-07-28-tech-evaluation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;何判断一个技术(中间件/库/工具)的靠谱程度？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何做技术选型&lt;/p&gt;
&lt;h3 id=&quot;System-amp-Architecture&quot;&gt;&lt;a href=&quot;#System-amp-Architecture&quot; class=&quot;headerlink&quot; title=&quot;System &amp;amp; Architecture&quot;&gt;&lt;/a&gt;System &amp;amp; Architecture&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://0xffffff.org/2017/05/01/41-linux-io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;聊聊Linux IO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A brief introduction to Linux I/O stack.&lt;/p&gt;
&lt;p&gt;这篇 post 的质量在国内技术博客里算是少有的干货。&lt;/p&gt;
&lt;p&gt;另，关于 page cache 和 buffer cache 的最新的内容，可以参考 Robert Love 在 quora 上的一个&lt;a href=&quot;http://qr.ae/TUTNCz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;回答&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=k12BJGSc2Nc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CppCon 2015: John Farrier “Demystifying Floating Point”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;工程实践上使用浮点数（IEEE-754）需要注意的一些坑。&lt;/p&gt;
&lt;p&gt;看之前最好翻一下 CSAPP 中关于浮点数 IEEE-754 模型的基础知识&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="linux" scheme="http://kingsamchen.github.io/tags/linux/"/>
    
      <category term="concurrency" scheme="http://kingsamchen.github.io/tags/concurrency/"/>
    
      <category term="lock-free" scheme="http://kingsamchen.github.io/tags/lock-free/"/>
    
      <category term="面试" scheme="http://kingsamchen.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="技术选型" scheme="http://kingsamchen.github.io/tags/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/"/>
    
      <category term="hash table" scheme="http://kingsamchen.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>Build Your Own Threadpool With C++</title>
    <link href="http://kingsamchen.github.io/2018/05/30/build-your-own-thread-pool-with-cpp/"/>
    <id>http://kingsamchen.github.io/2018/05/30/build-your-own-thread-pool-with-cpp/</id>
    <published>2018-05-30T12:27:37.000Z</published>
    <updated>2018-06-01T14:38:23.799Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Why-Threadpool-Matters&quot;&gt;&lt;a href=&quot;#Why-Threadpool-Matters&quot; class=&quot;headerlink&quot; title=&quot;Why Threadpool Matters&quot;&gt;&lt;/a&gt;Why Threadpool Matters&lt;/h2&gt;&lt;p&gt;Why on the earth do we need thread-pool? The answer is obvious: for doing jobs behind the scenes.&lt;/p&gt;
&lt;p&gt;That is, saying, you have a constant stream of incoming tasks to complete, and most of which either incur heavy computation or invovle device I/O, you definitely don’t want to execute them on your main thread, because it will block your main thread until the job is done, making your application less responsive.&lt;/p&gt;
&lt;p&gt;However, with thread-pool, you can simply submit a task to the pool, then continue what was doing; the task will eventually be completed on a thread of the thread-pool.&lt;/p&gt;
&lt;p&gt;If your processor has multiple cores, the task is possibly performed concurrently with your jobs on the main thread.&lt;/p&gt;
&lt;h2 id=&quot;What-Should-a-Threadpool-Provide&quot;&gt;&lt;a href=&quot;#What-Should-a-Threadpool-Provide&quot; class=&quot;headerlink&quot; title=&quot;What Should a Threadpool Provide&quot;&gt;&lt;/a&gt;What Should a Threadpool Provide&lt;/h2&gt;&lt;p&gt;Before we switch our focus to editor, we are better to think twice about what we can do with the thread-pool we will build.&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="thread-pool" scheme="http://kingsamchen.github.io/tags/thread-pool/"/>
    
  </entry>
  
  <entry>
    <title>浅析 RefCounted 和 WeakPtr：Chromium Base 篇</title>
    <link href="http://kingsamchen.github.io/2018/05/14/demystify-ref-counted-and-weak-ptr-in-chromium-base/"/>
    <id>http://kingsamchen.github.io/2018/05/14/demystify-ref-counted-and-weak-ptr-in-chromium-base/</id>
    <published>2018-05-14T06:47:38.000Z</published>
    <updated>2018-06-01T14:38:23.800Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;序言请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/13/shared-ptr-internals-introduction/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSVC STL 的分析版本请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/16/demystify-shared-ptr-and-weak-ptr-in-msvc-stl/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Libstdc++ 的分析版本请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/30/demystify-shared-ptr-and-weak-ptr-in-libstdcpp/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Boost 的分析版本请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/05/02/demystify-shared-ptr-and-weak-ptr-in-boost/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注 1：因为这不是第一篇分析，所以会直入主题，跳过文学写作常用的累赘的过渡。&lt;/p&gt;
&lt;p&gt;注 2：这是系列最后一篇。&lt;/p&gt;
&lt;h2 id=&quot;目标版本选择&quot;&gt;&lt;a href=&quot;#目标版本选择&quot; class=&quot;headerlink&quot; title=&quot;目标版本选择&quot;&gt;&lt;/a&gt;目标版本选择&lt;/h2&gt;&lt;p&gt;Chromium tag 68.0.3421.1&lt;/p&gt;
&lt;p&gt;代码位置：&lt;code&gt;base/memory/ref_counted.{h, cc}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;RefCountedBase-和-RefCounted&quot;&gt;&lt;a href=&quot;#RefCountedBase-和-RefCounted&quot; class=&quot;headerlink&quot; title=&quot;RefCountedBase 和 RefCounted&quot;&gt;&lt;/a&gt;RefCountedBase 和 RefCounted&lt;/h2&gt;&lt;p&gt;两个类实现了非线程安全的引用计数，即：内部计数使用的是 built-in integer&lt;/p&gt;
&lt;p&gt;先看看 &lt;code&gt;RefCountedBase&lt;/code&gt; 的大致结构：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RefCountedBase&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RefCountedBase&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(StartRefCountFromZeroTag)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RefCountedBase&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(StartRefCountFromOneTag)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ~RefCountedBase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AddRef&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; ref_count_ = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; DCHECK_IS_ON()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; needs_adopt_ref_ = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; in_dtor_ = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutable&lt;/span&gt; SequenceChecker sequence_checker_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DISALLOW_COPY_AND_ASSIGN(RefCountedBase);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出核心 &lt;code&gt;ref_count_&lt;/code&gt; 类型是 &lt;code&gt;uint32_t&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ctor 和 dtor 都被定义为 protected，说明这类使用做基类；同时提供了 &lt;code&gt;AddRef()&lt;/code&gt; 和 &lt;code&gt;Release()&lt;/code&gt;，进行内部的计数增减。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="chromium" scheme="http://kingsamchen.github.io/tags/chromium/"/>
    
      <category term="shared_ptr" scheme="http://kingsamchen.github.io/tags/shared-ptr/"/>
    
      <category term="shared_ptr-internals" scheme="http://kingsamchen.github.io/tags/shared-ptr-internals/"/>
    
      <category term="source-code-study" scheme="http://kingsamchen.github.io/tags/source-code-study/"/>
    
      <category term="weak_ptr" scheme="http://kingsamchen.github.io/tags/weak-ptr/"/>
    
      <category term="base lib" scheme="http://kingsamchen.github.io/tags/base-lib/"/>
    
  </entry>
  
  <entry>
    <title>浅析 shared_ptr：Boost 篇</title>
    <link href="http://kingsamchen.github.io/2018/05/02/demystify-shared-ptr-and-weak-ptr-in-boost/"/>
    <id>http://kingsamchen.github.io/2018/05/02/demystify-shared-ptr-and-weak-ptr-in-boost/</id>
    <published>2018-05-02T03:58:19.000Z</published>
    <updated>2018-06-01T14:38:23.801Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;序言请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/13/shared-ptr-internals-introduction/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSVC STL 的分析版本请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/16/demystify-shared-ptr-and-weak-ptr-in-msvc-stl/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Libstdc++ 的分析版本请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/30/demystify-shared-ptr-and-weak-ptr-in-libstdcpp/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注：因为这不是第一篇分析，所以会直入主题，跳过文学写作常用的累赘的过渡。&lt;/p&gt;
&lt;h2 id=&quot;目标版本选择&quot;&gt;&lt;a href=&quot;#目标版本选择&quot; class=&quot;headerlink&quot; title=&quot;目标版本选择&quot;&gt;&lt;/a&gt;目标版本选择&lt;/h2&gt;&lt;p&gt;选用最新的 Boost 1.67 作为研究目标&lt;/p&gt;
&lt;p&gt;在开始正题前，先简单看一下 &lt;code&gt;shared_ptr&lt;/code&gt; 的类成员，方便后续分析：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; detail &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;T&lt;/span&gt; &amp;gt; &lt;span class=&quot;title&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sp_element&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; T type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;title&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;shared_ptr&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; boost::detail::sp_element&amp;lt; T &amp;gt;::type element_type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// omitted other&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    element_type * px;                 &lt;span class=&quot;comment&quot;&gt;// contained pointer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boost::detail::shared_count pn;    &lt;span class=&quot;comment&quot;&gt;// reference counter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="shared_ptr" scheme="http://kingsamchen.github.io/tags/shared-ptr/"/>
    
      <category term="shared_ptr-internals" scheme="http://kingsamchen.github.io/tags/shared-ptr-internals/"/>
    
      <category term="source-code-study" scheme="http://kingsamchen.github.io/tags/source-code-study/"/>
    
      <category term="weak_ptr" scheme="http://kingsamchen.github.io/tags/weak-ptr/"/>
    
      <category term="boost" scheme="http://kingsamchen.github.io/tags/boost/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Post in Apr 2018</title>
    <link href="http://kingsamchen.github.io/2018/05/01/monthly-read-posts-in-apr-2018/"/>
    <id>http://kingsamchen.github.io/2018/05/01/monthly-read-posts-in-apr-2018/</id>
    <published>2018-05-01T09:50:11.000Z</published>
    <updated>2018-05-01T10:03:00.593Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/what-is-load-balancing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;What is Load
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="load balancing" scheme="http://kingsamchen.github.io/tags/load-balancing/"/>
    
      <category term="random" scheme="http://kingsamchen.github.io/tags/random/"/>
    
      <category term="cache coherency" scheme="http://kingsamchen.github.io/tags/cache-coherency/"/>
    
      <category term="consistent hashing" scheme="http://kingsamchen.github.io/tags/consistent-hashing/"/>
    
  </entry>
  
  <entry>
    <title>std::function Must be Copyable</title>
    <link href="http://kingsamchen.github.io/2018/04/23/std-funcion-must-be-copyable/"/>
    <id>http://kingsamchen.github.io/2018/04/23/std-funcion-must-be-copyable/</id>
    <published>2018-04-23T15:55:09.000Z</published>
    <updated>2018-05-01T09:49:24.132Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;前几天在写一个 &lt;a href=&quot;https://github.com/kingsamchen/Eureka/tree/master/TinyThreadPool&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThreadPool
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="thread-pool" scheme="http://kingsamchen.github.io/tags/thread-pool/"/>
    
      <category term="std::function" scheme="http://kingsamchen.github.io/tags/std-function/"/>
    
      <category term="packaged_task" scheme="http://kingsamchen.github.io/tags/packaged-task/"/>
    
  </entry>
  
  <entry>
    <title>Use Lambda With PostTask</title>
    <link href="http://kingsamchen.github.io/2018/04/11/use-lambda-with-post-task/"/>
    <id>http://kingsamchen.github.io/2018/04/11/use-lambda-with-post-task/</id>
    <published>2018-04-11T12:03:59.000Z</published>
    <updated>2018-04-11T12:23:55.578Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;曾经为了能在 &lt;code&gt;PostTask()&lt;/code&gt; 里使用 lambda，实现了一个自动将 non-capturing lambda decay 到对应函数指针，在利用 &lt;code&gt;base::Bind()&lt;/code&gt; 的方案&lt;a
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="chromium" scheme="http://kingsamchen.github.io/tags/chromium/"/>
    
      <category term="lambda" scheme="http://kingsamchen.github.io/tags/lambda/"/>
    
      <category term="base" scheme="http://kingsamchen.github.io/tags/base/"/>
    
  </entry>
  
  <entry>
    <title>利用 vcpkg 编译带汇编优化的 libx264</title>
    <link href="http://kingsamchen.github.io/2018/04/03/compile-libx264-with-asm-optimization-with-vcpkg/"/>
    <id>http://kingsamchen.github.io/2018/04/03/compile-libx264-with-asm-optimization-with-vcpkg/</id>
    <published>2018-04-03T12:51:22.000Z</published>
    <updated>2018-04-03T13:02:35.284Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;使用 vcpkg 编译 libx264 有一个很重要的原因：可以获得 PDB，而且构建流程被大大精简了。&lt;/p&gt;
&lt;p&gt;但是这里有一个坑：vcpkg 上的 libx264 模块编译默认是开启了
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="windows" scheme="http://kingsamchen.github.io/tags/windows/"/>
    
      <category term="visual studio" scheme="http://kingsamchen.github.io/tags/visual-studio/"/>
    
      <category term="libx264" scheme="http://kingsamchen.github.io/tags/libx264/"/>
    
      <category term="vcpkg" scheme="http://kingsamchen.github.io/tags/vcpkg/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in Mar 2018</title>
    <link href="http://kingsamchen.github.io/2018/04/01/monthly-read-posts-in-mar-2018/"/>
    <id>http://kingsamchen.github.io/2018/04/01/monthly-read-posts-in-mar-2018/</id>
    <published>2018-04-01T04:03:00.000Z</published>
    <updated>2018-04-01T04:10:11.628Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a href=&quot;http://akumuli.org/akumuli/2015/03/19/sequencer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sorting, caching and
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="constexpr" scheme="http://kingsamchen.github.io/tags/constexpr/"/>
    
      <category term="concurrency" scheme="http://kingsamchen.github.io/tags/concurrency/"/>
    
      <category term="lock-free" scheme="http://kingsamchen.github.io/tags/lock-free/"/>
    
      <category term="actor" scheme="http://kingsamchen.github.io/tags/actor/"/>
    
      <category term="coroutine" scheme="http://kingsamchen.github.io/tags/coroutine/"/>
    
      <category term="c10k" scheme="http://kingsamchen.github.io/tags/c10k/"/>
    
      <category term="pthread" scheme="http://kingsamchen.github.io/tags/pthread/"/>
    
      <category term="technical debt" scheme="http://kingsamchen.github.io/tags/technical-debt/"/>
    
  </entry>
  
  <entry>
    <title>浅析 shared_ptr：Libstdc++ 篇</title>
    <link href="http://kingsamchen.github.io/2018/03/30/demystify-shared-ptr-and-weak-ptr-in-libstdcpp/"/>
    <id>http://kingsamchen.github.io/2018/03/30/demystify-shared-ptr-and-weak-ptr-in-libstdcpp/</id>
    <published>2018-03-29T16:58:44.000Z</published>
    <updated>2018-06-01T14:38:23.802Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;序言请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/13/shared-ptr-internals-introduction/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSVC STL 的分析版本请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/16/demystify-shared-ptr-and-weak-ptr-in-msvc-stl/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注：因为这不是第一篇分析，所以会直入主题，跳过文学写作常用的累赘的过渡。&lt;/p&gt;
&lt;h2 id=&quot;版本选择与源码位置&quot;&gt;&lt;a href=&quot;#版本选择与源码位置&quot; class=&quot;headerlink&quot; title=&quot;版本选择与源码位置&quot;&gt;&lt;/a&gt;版本选择与源码位置&lt;/h2&gt;&lt;p&gt;目前的工作机是 Linux Mint 18，对应的是 Ubuntu 16.04 LTS。&lt;/p&gt;
&lt;p&gt;这个版本的系统上源包默认提供的是 GCC 5.4 和 clang 3.8，跟随的 libstdc++ 的大版本是 6。&lt;/p&gt;
&lt;p&gt;考虑到 Linux 上 clang 也是默认使用 libstdc++，且 GCC 6/7/8 使用的 libstdc++ 的大版本都是 6，因此直接选用目录 &lt;code&gt;/usr/include/c++/5&lt;/code&gt; 下的源码作为研究对象。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="shared_ptr" scheme="http://kingsamchen.github.io/tags/shared-ptr/"/>
    
      <category term="shared_ptr-internals" scheme="http://kingsamchen.github.io/tags/shared-ptr-internals/"/>
    
      <category term="source-code-study" scheme="http://kingsamchen.github.io/tags/source-code-study/"/>
    
      <category term="weak_ptr" scheme="http://kingsamchen.github.io/tags/weak-ptr/"/>
    
      <category term="libstdc++" scheme="http://kingsamchen.github.io/tags/libstdc/"/>
    
      <category term="gcc" scheme="http://kingsamchen.github.io/tags/gcc/"/>
    
      <category term="clang" scheme="http://kingsamchen.github.io/tags/clang/"/>
    
  </entry>
  
  <entry>
    <title>浅析 shared_ptr：MSVC STL 篇</title>
    <link href="http://kingsamchen.github.io/2018/03/16/demystify-shared-ptr-and-weak-ptr-in-msvc-stl/"/>
    <id>http://kingsamchen.github.io/2018/03/16/demystify-shared-ptr-and-weak-ptr-in-msvc-stl/</id>
    <published>2018-03-15T16:52:05.000Z</published>
    <updated>2018-06-01T14:38:23.803Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;序言请移步&lt;a href=&quot;https://kingsamchen.github.io/2018/03/13/shared-ptr-internals-introduction/&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为这是系列第一篇，所以会带一些功能的 demo，以方便叙述。&lt;/p&gt;
&lt;h2 id=&quot;How-shared-ptr-new-T-differs-from-make-shared&quot;&gt;&lt;a href=&quot;#How-shared-ptr-new-T-differs-from-make-shared&quot; class=&quot;headerlink&quot; title=&quot;How shared_ptr(new T()) differs from make_shared()&quot;&gt;&lt;/a&gt;How shared_ptr&lt;t&gt;(new T()) differs from make_shared&lt;t&gt;()&lt;/t&gt;&lt;/t&gt;&lt;/h2&gt;&lt;p&gt;首先考虑 &lt;code&gt;shared_ptr&lt;/code&gt; 对象的创建，对于给定类型 &lt;code&gt;T&lt;/code&gt;，假设通过&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; ptr = &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::make_shared&amp;lt;T&amp;gt;(...);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建一个实例。&lt;/p&gt;
&lt;p&gt;看一下函数代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;Ty&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;         &lt;span class=&quot;title&quot;&gt;class&lt;/span&gt;... _&lt;span class=&quot;title&quot;&gt;Types&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;_&lt;span class=&quot;title&quot;&gt;NODISCARD&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;_Ty&amp;gt; &lt;span class=&quot;title&quot;&gt;make_shared&lt;/span&gt;(_&lt;span class=&quot;title&quot;&gt;Types&lt;/span&gt;&amp;amp;&amp;amp;... _&lt;span class=&quot;title&quot;&gt;Args&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// make a shared_ptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; _Rx = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; _Ref_count_obj&amp;lt;_Ty&amp;gt;(_STD forward&amp;lt;_Types&amp;gt;(_Args)...);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;_Ty&amp;gt; _Ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _Ret._Set_ptr_rep_and_enable_shared(_Rx-&amp;gt;_Getptr(), _Rx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (_Ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里首先在 heap 上创建了一个 &lt;code&gt;_Ref_count_obj&amp;lt;_Ty&amp;gt;&lt;/code&gt; 对象，通过 &lt;code&gt;std::forward()&lt;/code&gt; 将 &lt;code&gt;make_shared()&lt;/code&gt; 的参数转发作为构造函数；接着通过 default contructor 创建了一个 &lt;code&gt;shared_ptr&amp;lt;_Ty&amp;gt;&lt;/code&gt;，并调用 &lt;code&gt;_Set_ptr_rep_and_enable_shared()&lt;/code&gt; 设置相关数据。&lt;/p&gt;
&lt;p&gt;因为创建 &lt;code&gt;_Ty&lt;/code&gt; 实例需要的参数 &lt;code&gt;_Args&lt;/code&gt; 被转发到了 &lt;code&gt;_Ref_count_obj&lt;/code&gt; 的构造函数中，且 &lt;code&gt;shared_ptr&lt;/code&gt; 的 default constructor 实质上是一个 &lt;em&gt;constexpr function&lt;/em&gt;，因此猜测 &lt;code&gt;shared_ptr&lt;/code&gt; 自身并不负责创建其管理的 object instance，而是将这部分操作“委托”给 &lt;code&gt;_Ref_count_obj&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="visual studio" scheme="http://kingsamchen.github.io/tags/visual-studio/"/>
    
      <category term="shared_ptr" scheme="http://kingsamchen.github.io/tags/shared-ptr/"/>
    
      <category term="shared_ptr-internals" scheme="http://kingsamchen.github.io/tags/shared-ptr-internals/"/>
    
      <category term="source-code-study" scheme="http://kingsamchen.github.io/tags/source-code-study/"/>
    
      <category term="weak_ptr" scheme="http://kingsamchen.github.io/tags/weak-ptr/"/>
    
  </entry>
  
  <entry>
    <title>浅析 shared_ptr：序论</title>
    <link href="http://kingsamchen.github.io/2018/03/13/shared-ptr-internals-introduction/"/>
    <id>http://kingsamchen.github.io/2018/03/13/shared-ptr-internals-introduction/</id>
    <published>2018-03-13T01:03:14.000Z</published>
    <updated>2018-03-13T16:10:51.293Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;单看标准库而言，&lt;code&gt;shared_ptr&lt;/code&gt;/&lt;code&gt;weak_ptr&lt;/code&gt;（后文除特指外，不再同时带上 &lt;code&gt;weak_ptr&lt;/code&gt;） 一开始作为 TR1 的一员引入，低调行事多年后自 C++ 11
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="shared_ptr" scheme="http://kingsamchen.github.io/tags/shared-ptr/"/>
    
      <category term="shared_ptr-internals" scheme="http://kingsamchen.github.io/tags/shared-ptr-internals/"/>
    
      <category term="source-code-study" scheme="http://kingsamchen.github.io/tags/source-code-study/"/>
    
      <category term="weak_ptr" scheme="http://kingsamchen.github.io/tags/weak-ptr/"/>
    
  </entry>
  
  <entry>
    <title>Tiny Concurrent Http Server on Windows and Linux</title>
    <link href="http://kingsamchen.github.io/2018/03/08/tiny-concurrent-http-server-on-windows-and-linux/"/>
    <id>http://kingsamchen.github.io/2018/03/08/tiny-concurrent-http-server-on-windows-and-linux/</id>
    <published>2018-03-08T15:46:41.000Z</published>
    <updated>2018-03-08T16:10:48.455Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;前段时间趁着春节，分别基于 IOCP 和 epoll 实现了 demo 级别的 http server（在遵守 http 1.1 socket 复用基础上只提供了某个指定目录下文件的 GET），算是简单的过了一下 proactor 和 reactor 模型下的 TCP
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="windows" scheme="http://kingsamchen.github.io/tags/windows/"/>
    
      <category term="linux" scheme="http://kingsamchen.github.io/tags/linux/"/>
    
      <category term="tcp" scheme="http://kingsamchen.github.io/tags/tcp/"/>
    
      <category term="epoll" scheme="http://kingsamchen.github.io/tags/epoll/"/>
    
      <category term="iocp" scheme="http://kingsamchen.github.io/tags/iocp/"/>
    
      <category term="concurrent" scheme="http://kingsamchen.github.io/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>被 FFmpeg 的日志模块撞了一下腰</title>
    <link href="http://kingsamchen.github.io/2018/03/07/ffmpeg-logging-utils-use-erroneous-format-specifiers/"/>
    <id>http://kingsamchen.github.io/2018/03/07/ffmpeg-logging-utils-use-erroneous-format-specifiers/</id>
    <published>2018-03-06T16:00:55.000Z</published>
    <updated>2018-03-06T16:09:20.081Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;周末的时候客服同学反馈有个用户出现了崩溃，并且要来了崩溃 dmp 文件。&lt;/p&gt;
&lt;p&gt;挂上 windbg 后发现崩溃原因是 CRT 的 &lt;code&gt;invalid-parameter&lt;/code&gt; 异常，第一现场是输出 ffmpeg 的 avcodec
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="crash" scheme="http://kingsamchen.github.io/tags/crash/"/>
    
      <category term="windows" scheme="http://kingsamchen.github.io/tags/windows/"/>
    
      <category term="ffmpeg" scheme="http://kingsamchen.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>在 VS C++ 的调试器中正确显示 UTF-8 字符串内容</title>
    <link href="http://kingsamchen.github.io/2018/03/04/display-utf-8-string-in-vs-debugger/"/>
    <id>http://kingsamchen.github.io/2018/03/04/display-utf-8-string-in-vs-debugger/</id>
    <published>2018-03-04T14:13:31.000Z</published>
    <updated>2018-03-04T14:42:06.731Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;众所周知，UTF-8 在 Windows 上一直都不是一等公民，在 MSVC 的调试器里，&lt;code&gt;std::string&lt;/code&gt; 默认按照本地编码解释，在中文系统上是 GBK 或 GB2312。&lt;/p&gt;
&lt;p&gt;于是，如果一个
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="Visual Studio" scheme="http://kingsamchen.github.io/tags/Visual-Studio/"/>
    
      <category term="debugger" scheme="http://kingsamchen.github.io/tags/debugger/"/>
    
      <category term="UTF-8" scheme="http://kingsamchen.github.io/tags/UTF-8/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in Feb 2018</title>
    <link href="http://kingsamchen.github.io/2018/03/02/monthly-read-posts-in-feb-2018/"/>
    <id>http://kingsamchen.github.io/2018/03/02/monthly-read-posts-in-feb-2018/</id>
    <published>2018-03-02T15:52:26.000Z</published>
    <updated>2018-03-02T16:09:53.243Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://baptiste-wicht.com/posts/2012/07/c11-concurrency-tutorial-part-4-atomic-type.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C++11
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="atomic" scheme="http://kingsamchen.github.io/tags/atomic/"/>
    
      <category term="memory fence" scheme="http://kingsamchen.github.io/tags/memory-fence/"/>
    
      <category term="memory order" scheme="http://kingsamchen.github.io/tags/memory-order/"/>
    
  </entry>
  
  <entry>
    <title>靴子落地</title>
    <link href="http://kingsamchen.github.io/2018/02/26/the-new-dark-age/"/>
    <id>http://kingsamchen.github.io/2018/02/26/the-new-dark-age/</id>
    <published>2018-02-26T07:04:19.000Z</published>
    <updated>2018-03-01T14:00:55.334Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;2018年2月25日&lt;/p&gt;
&lt;p&gt;是日&lt;/p&gt;
&lt;p&gt;靴子落地&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://music.163.com/#/song?id=93175&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="gibberish" scheme="http://kingsamchen.github.io/tags/gibberish/"/>
    
      <category term="dark-age" scheme="http://kingsamchen.github.io/tags/dark-age/"/>
    
  </entry>
  
</feed>
