<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KC的废墟堆</title>
  
  <subtitle>Will you serve in Heaven, or rule in Hell</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kingsamchen.github.io/"/>
  <updated>2019-08-04T03:11:52.310Z</updated>
  <id>http://kingsamchen.github.io/</id>
  
  <author>
    <name>Kingsley Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Monthly Read Posts in July 2019</title>
    <link href="http://kingsamchen.github.io/2019/08/04/monthly-read-posts-in-july-2019/"/>
    <id>http://kingsamchen.github.io/2019/08/04/monthly-read-posts-in-july-2019/</id>
    <published>2019-08-04T02:55:30.000Z</published>
    <updated>2019-08-04T03:11:52.310Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Programming-Languages&quot;&gt;&lt;a href=&quot;#Programming-Languages&quot; class=&quot;headerlink&quot; title=&quot;Programming Languages&quot;&gt;&lt;/a&gt;Programming
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="sync.pool" scheme="http://kingsamchen.github.io/tags/sync-pool/"/>
    
      <category term="quadratic residues" scheme="http://kingsamchen.github.io/tags/quadratic-residues/"/>
    
      <category term="reader-writer lock" scheme="http://kingsamchen.github.io/tags/reader-writer-lock/"/>
    
  </entry>
  
  <entry>
    <title>学习 MySQL 的一些吐槽</title>
    <link href="http://kingsamchen.github.io/2019/07/29/learning-mysql-rants/"/>
    <id>http://kingsamchen.github.io/2019/07/29/learning-mysql-rants/</id>
    <published>2019-07-29T11:56:44.000Z</published>
    <updated>2019-07-29T12:48:58.378Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近学习 MySQL 的过程中发现一些很坑的点，总结记录如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RDBMS 虽然理论很早就有了，但是近些年的实际应用进化已经导致各家独立。不同引擎实现不同，甚至连 spec 都不同。&lt;/li&gt;
&lt;li&gt;不考虑 Oracl, SQL Server
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="rant" scheme="http://kingsamchen.github.io/tags/rant/"/>
    
      <category term="mysql" scheme="http://kingsamchen.github.io/tags/mysql/"/>
    
      <category term="吐槽" scheme="http://kingsamchen.github.io/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in June 2019</title>
    <link href="http://kingsamchen.github.io/2019/07/21/monthly-read-posts-in-jun-2019/"/>
    <id>http://kingsamchen.github.io/2019/07/21/monthly-read-posts-in-jun-2019/</id>
    <published>2019-07-21T06:09:48.000Z</published>
    <updated>2019-07-21T06:11:06.142Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Concurrency&quot;&gt;&lt;a href=&quot;#Concurrency&quot; class=&quot;headerlink&quot; title=&quot;Concurrency&quot;&gt;&lt;/a&gt;Concurrency&lt;/h2&gt;&lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="golang" scheme="http://kingsamchen.github.io/tags/golang/"/>
    
      <category term="memory model" scheme="http://kingsamchen.github.io/tags/memory-model/"/>
    
  </entry>
  
  <entry>
    <title>实现 compressed pair</title>
    <link href="http://kingsamchen.github.io/2019/06/30/implementing-compressed-pair/"/>
    <id>http://kingsamchen.github.io/2019/06/30/implementing-compressed-pair/</id>
    <published>2019-06-30T09:58:25.000Z</published>
    <updated>2019-06-30T10:29:47.882Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;C++ 的 &lt;code&gt;std::unique_ptr&lt;/code&gt; 有个神奇的特性：如果使用默认的 deleter（即使用 &lt;code&gt;operator delete&lt;/code&gt;），或者 non-capturing lambda 作为 deleter，则有&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::unique&amp;lt;T&amp;gt;) == &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即整个对象的内存布局和 trivial pointer 一致，没有额外的开销。&lt;/p&gt;
&lt;p&gt;这个特性的背后就是 compress-pair；这个设施能够在某个元素是一个 empty class 时避免为其分配内存。&lt;/p&gt;
&lt;p&gt;注：这里假设你知道什么是 EBO，以及为什么会有 EBO。&lt;/p&gt;
&lt;p&gt;这里自己动手实现一个 compressed pair：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; Tx, &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; Ty, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::is_empty&amp;lt;Tx&amp;gt;::value&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct CompressedPair : Tx &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Ty second;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CompressedPair&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T&amp;amp;&amp;amp; t)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        : Tx(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          second(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::forward&amp;lt;T&amp;gt;(t))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; U&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CompressedPair(T&amp;amp;&amp;amp; t, U&amp;amp;&amp;amp; u)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        : Tx(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::forward&amp;lt;T&amp;gt;(t)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          second(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::forward&amp;lt;U&amp;gt;(u))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Tx&amp;amp; &lt;span class=&quot;title&quot;&gt;get_first&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Tx&amp;amp; &lt;span class=&quot;title&quot;&gt;get_first&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; Tx, &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; Ty&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CompressedPair&lt;/span&gt;&amp;lt;Tx, Ty, false&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Tx first;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Ty second;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; U&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CompressedPair(T&amp;amp;&amp;amp; t, U&amp;amp;&amp;amp; u)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        : first(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::forward&amp;lt;T&amp;gt;(t)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          second(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::forward&amp;lt;U&amp;gt;(u))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Tx&amp;amp; &lt;span class=&quot;title&quot;&gt;get_first&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; first;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Tx&amp;amp; &lt;span class=&quot;title&quot;&gt;get_first&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; first;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为 EBO 是实现的核心，而父类的构造顺序先于子类的任何成员，上面将 &lt;code&gt;Tx&lt;/code&gt; 作为可被优化的成员。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="ebo" scheme="http://kingsamchen.github.io/tags/ebo/"/>
    
      <category term="unique_ptr" scheme="http://kingsamchen.github.io/tags/unique-ptr/"/>
    
      <category term="optimization" scheme="http://kingsamchen.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>为 CommandLine 加上值指定类型转换以及一些扯淡</title>
    <link href="http://kingsamchen.github.io/2019/06/23/add-value-type-conversion-for-cmdline/"/>
    <id>http://kingsamchen.github.io/2019/06/23/add-value-type-conversion-for-cmdline/</id>
    <published>2019-06-23T06:56:22.000Z</published>
    <updated>2019-06-23T07:42:04.604Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;过去两周抽了点时间给 &lt;code&gt;KBase::CommandLine&lt;/code&gt; 做了一个&lt;a
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="KBase" scheme="http://kingsamchen.github.io/tags/KBase/"/>
    
      <category term="command-line" scheme="http://kingsamchen.github.io/tags/command-line/"/>
    
      <category term="abstraction" scheme="http://kingsamchen.github.io/tags/abstraction/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in May 2019</title>
    <link href="http://kingsamchen.github.io/2019/06/02/monthly-read-posts-in-may-2019/"/>
    <id>http://kingsamchen.github.io/2019/06/02/monthly-read-posts-in-may-2019/</id>
    <published>2019-06-02T13:40:29.000Z</published>
    <updated>2019-06-02T13:42:29.575Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Concurrency&quot;&gt;&lt;a href=&quot;#Concurrency&quot; class=&quot;headerlink&quot; title=&quot;Concurrency&quot;&gt;&lt;/a&gt;Concurrency&lt;/h2&gt;&lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="mutex" scheme="http://kingsamchen.github.io/tags/mutex/"/>
    
      <category term="lockless" scheme="http://kingsamchen.github.io/tags/lockless/"/>
    
      <category term="memory reordering" scheme="http://kingsamchen.github.io/tags/memory-reordering/"/>
    
      <category term="circuit breaker" scheme="http://kingsamchen.github.io/tags/circuit-breaker/"/>
    
  </entry>
  
  <entry>
    <title>基于 semaphore 实现轻量级 mutex</title>
    <link href="http://kingsamchen.github.io/2019/05/12/roll-your-own-light-weight-mutex/"/>
    <id>http://kingsamchen.github.io/2019/05/12/roll-your-own-light-weight-mutex/</id>
    <published>2019-05-12T12:10:37.000Z</published>
    <updated>2019-05-12T12:45:05.158Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;核心是 Jeff Preshing 大牛的两篇文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://preshing.com/20120226/roll-your-own-lightweight-mutex/&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="mutex" scheme="http://kingsamchen.github.io/tags/mutex/"/>
    
      <category term="multithreading" scheme="http://kingsamchen.github.io/tags/multithreading/"/>
    
      <category term="synchronization" scheme="http://kingsamchen.github.io/tags/synchronization/"/>
    
      <category term="semaphore" scheme="http://kingsamchen.github.io/tags/semaphore/"/>
    
  </entry>
  
  <entry>
    <title>Anvil -- An Assistant For You CMake</title>
    <link href="http://kingsamchen.github.io/2019/05/04/anvil-for-assisting-your-cmake/"/>
    <id>http://kingsamchen.github.io/2019/05/04/anvil-for-assisting-your-cmake/</id>
    <published>2019-05-04T13:12:05.000Z</published>
    <updated>2019-05-11T03:07:31.694Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h3&gt;&lt;p&gt;前段时间专门抽空做了一个小工具，也就是这里要讲的主题：&lt;a href=&quot;https://github.com/kingsamchen/anvil&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;anvil&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一开始做 anvil 的动力很简单：某次尝试体验一下 Linux SignalFD 功能时想直接使用 ezio 的 &lt;code&gt;EventLoop&lt;/code&gt; 作为基础事件循环，同时项目使用 cmake 管理。&lt;/p&gt;
&lt;p&gt;为了省事，我直接从 ezio 的项目里抠出来 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 和几个自己写的 &lt;code&gt;.cmake&lt;/code&gt; 文件，就地&lt;a href=&quot;https://github.com/kingsamchen/Eureka/tree/master/UsingSignalfd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;修改&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但事实证明哪怕这样，改动量也不小，原因大体是因为：cmake 里（非函数内定义的）变量作用域是全局的，通过 fetch-content 功能引入的依赖在 &lt;code&gt;add_subdirectory()&lt;/code&gt; 后的模块里也能看到上一层定义的变量，因此为了防止一些控制型变量发生冲突，我都在前面加上了对应的模块前缀。&lt;/p&gt;
&lt;p&gt;所以我面对的就是一大坨变量名的更换，以及少部分声明/属性的调整。&lt;/p&gt;
&lt;p&gt;考虑到大部分的文件内容都是可以模板化的，而手动“实例化”不仅费事还很容易出错，所以我就很自然地萌生了写一个工具自动化这个过程的想法。&lt;/p&gt;
&lt;h3 id=&quot;0x01&quot;&gt;&lt;a href=&quot;#0x01&quot; class=&quot;headerlink&quot; title=&quot;0x01&quot;&gt;&lt;/a&gt;0x01&lt;/h3&gt;&lt;p&gt;在经过一两天的短暂思考后，我大致确定了这个工具的定位和需要实现的基本目标，总结起来有三个核心点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;辅助 cmake 而不是试图替代它或深度封装&lt;/li&gt;
&lt;li&gt;内建一个轻量型的依赖管理功能&lt;/li&gt;
&lt;li&gt;配置化的生成 &amp;amp; 构建流程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先，第一点是重中之重。&lt;br&gt;
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="anvil" scheme="http://kingsamchen.github.io/tags/anvil/"/>
    
      <category term="cmake" scheme="http://kingsamchen.github.io/tags/cmake/"/>
    
      <category term="cpp" scheme="http://kingsamchen.github.io/tags/cpp/"/>
    
      <category term="project management" scheme="http://kingsamchen.github.io/tags/project-management/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in Apr 2019</title>
    <link href="http://kingsamchen.github.io/2019/05/02/monthly-read-posts-in-apr-2019/"/>
    <id>http://kingsamchen.github.io/2019/05/02/monthly-read-posts-in-apr-2019/</id>
    <published>2019-05-02T14:57:13.000Z</published>
    <updated>2019-05-02T15:02:53.654Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Programming-Languages&quot;&gt;&lt;a href=&quot;#Programming-Languages&quot; class=&quot;headerlink&quot; title=&quot;Programming Languages&quot;&gt;&lt;/a&gt;Programming Languages&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://akrzemi1.wordpress.com/2011/09/21/destructors-that-throw/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Destructors that throw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C++ 11之后的 destructor 默认是 &lt;code&gt;noexcept&lt;/code&gt;，如果有 active exception 逃逸出 dtor 会直接触发 &lt;code&gt;std::terminate()&lt;/code&gt;，即使外部有 catch handler。可以用 &lt;code&gt;noexcept(false)&lt;/code&gt; 显式关闭。&lt;/p&gt;
&lt;p&gt;因为 stack unwinding 是可以嵌套的，一个精心设计的场合下（见文中例子），可以做到多个 active exception 不在一个层次里，因此也不会触发 double-exception situation。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://akrzemi1.wordpress.com/2011/09/28/who-calls-stdterminate/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Who calls std::terminate?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;an exception leaves out from main function&lt;/p&gt;
&lt;p&gt;an exception leaves out from initial function of a thread&lt;/p&gt;
&lt;p&gt;an exception leaves out from dtor (since c++ 11 with noexcept guarantee)&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="cpp" scheme="http://kingsamchen.github.io/tags/cpp/"/>
    
      <category term="golang" scheme="http://kingsamchen.github.io/tags/golang/"/>
    
      <category term="noexcept" scheme="http://kingsamchen.github.io/tags/noexcept/"/>
    
      <category term="gc" scheme="http://kingsamchen.github.io/tags/gc/"/>
    
      <category term="mutex" scheme="http://kingsamchen.github.io/tags/mutex/"/>
    
      <category term="syscall" scheme="http://kingsamchen.github.io/tags/syscall/"/>
    
  </entry>
  
  <entry>
    <title>Write Your Own DNS Query</title>
    <link href="http://kingsamchen.github.io/2019/04/13/write-your-own-dns-query/"/>
    <id>http://kingsamchen.github.io/2019/04/13/write-your-own-dns-query/</id>
    <published>2019-04-13T02:49:01.000Z</published>
    <updated>2019-04-13T09:04:12.033Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;大部分人应该都知道 DNS 协议，以及它的用处。但是考虑过自己动手写 DNS message transmission 的应该不占多数。&lt;/p&gt;
&lt;p&gt;我们不妨考虑如何自己实现一个简单的 DNS client，完成基本的 domain name query and response parsing。&lt;/p&gt;
&lt;p&gt;因为 DNS 协议通常使用 UDP 作为其传输层协议，而且数据包是二进制包，所以实现一个这样简单的 demo 考虑用 golang 可能会省事儿不少。&lt;/p&gt;
&lt;h3 id=&quot;DNS-Message-Format&quot;&gt;&lt;a href=&quot;#DNS-Message-Format&quot; class=&quot;headerlink&quot; title=&quot;DNS Message Format&quot;&gt;&lt;/a&gt;DNS Message Format&lt;/h3&gt;&lt;p&gt;大体上 DNS 不是一个复杂的协议（虽然各类坑实在不少），所有的消息，不管是 query 还是 reply，都共享一个消息格式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|        Header       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|       Question      | the question for the name server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|        Answer       | Resource Records (RRs) answering the question&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|      Authority      | RRs pointing toward an authority&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|      Additional     | RRs holding additional information&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Header：消息头，包含一些参数、标志位&lt;/li&gt;
&lt;li&gt;Question：包含 query 的信息，例如需要查询的 domain&lt;/li&gt;
&lt;li&gt;Answer：reply 的信息&lt;/li&gt;
&lt;li&gt;Authority：如果有信息，则表明应答的服务器是 ultimate authority server。别忘了 DNS 服务器是树形结构，通常终端用户查询的 DNS 服务器都是 local DNS server。&lt;/li&gt;
&lt;li&gt;Additional：服务器传回的一些额外数据，非用户显式需要的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于一个 query message，&lt;code&gt;Answer&lt;/code&gt; section 是空的；而对于一个 reply message，&lt;code&gt;Question&lt;/code&gt; 保存着对应 query 的数据。&lt;/p&gt;
&lt;p&gt;一般而言，终端设备收到的 reply 消息里，&lt;code&gt;Authority&lt;/code&gt; 和 &lt;code&gt;Additional&lt;/code&gt; 是空的。所以下面会跳过这两个 section 的描述。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="golang" scheme="http://kingsamchen.github.io/tags/golang/"/>
    
      <category term="dns" scheme="http://kingsamchen.github.io/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>统一 ezio Buffer 的算术类型读写接口</title>
    <link href="http://kingsamchen.github.io/2019/04/07/unify-ezio-buffer-read-and-write-functions-for-arithmetic-types/"/>
    <id>http://kingsamchen.github.io/2019/04/07/unify-ezio-buffer-read-and-write-functions-for-arithmetic-types/</id>
    <published>2019-04-07T12:40:11.000Z</published>
    <updated>2019-04-13T02:48:22.102Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;ezio Buffer 一开始的时候只为 read, write 和 peek 提供了从 &lt;code&gt;int8_t&lt;/code&gt; 到 &lt;code&gt;int64_t&lt;/code&gt; 的函数重载，如果需要处理 unsigned integers，那么就需要自己额外做 &lt;code&gt;static_cast&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;ezio 的主要客户&lt;a href=&quot;https://github.com/oceancx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;藏心&lt;/a&gt;同学早前抱怨过这个问题，并且同时建议我加上对 &lt;code&gt;float/double&lt;/code&gt; 的浮点数支持。&lt;/p&gt;
&lt;p&gt;对于这个建议我一开始是抵触的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己 cast 又不是不能用，额外加重载支持三个操作工作量都要翻一番呢&lt;/li&gt;
&lt;li&gt;浮点数的 binary serialization 本来就是很难跨平台的，不是每个环境都（虽然大部分）要求使用 IEEE 754 spec。如果真的需要直接把浮点数存到网络包里，自己直接操作 underlying binary layout 不就好了…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是藏心同学一开始开的 issue 我一直没理他，于是最后他自己关掉了…&lt;/p&gt;
&lt;p&gt;等到我自己动手写一个 socks4a proxy 的时候我发现，自己 cast 真的是…太蛋疼了…而且代码看上去还非常丑，大面积的 &lt;code&gt;static_cast&lt;/code&gt; 制造了相当一部分内容噪音。那会儿我大概有点理解藏心同学的内心感受。&lt;/p&gt;
&lt;p&gt;于是我思考良久，打算改造 Buffer 的这部分接口，以支持绝大多数 integer types，顺带也增加入 floating piont types 的支持，这样 read, write, peek 就基本支持了绝大多数 arithmetic types。&lt;/p&gt;
&lt;p&gt;通过直接增加重载是我极力避免的，因为除了接口签名外，大部分实现几乎是一样的，不外乎：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是单字节，直接写/读操作&lt;/li&gt;
&lt;li&gt;如果是多字节，首先字节序转换，然后做写/读操作&lt;/li&gt;
&lt;li&gt;如果是浮点数，首先按照对应字节大小的整数类型&lt;strong&gt;解释&lt;/strong&gt;内存，然后参考普通整数的处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是自然而然的想到直接将函数做成 function templates 来增强语义。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="cpp" scheme="http://kingsamchen.github.io/tags/cpp/"/>
    
      <category term="SFINAE" scheme="http://kingsamchen.github.io/tags/SFINAE/"/>
    
      <category term="template" scheme="http://kingsamchen.github.io/tags/template/"/>
    
      <category term="ezio" scheme="http://kingsamchen.github.io/tags/ezio/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in Mar 2019</title>
    <link href="http://kingsamchen.github.io/2019/04/02/monthly-read-posts-in-mar-2019/"/>
    <id>http://kingsamchen.github.io/2019/04/02/monthly-read-posts-in-mar-2019/</id>
    <published>2019-04-02T15:18:21.000Z</published>
    <updated>2019-04-07T12:38:33.510Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Networking&quot;&gt;&lt;a href=&quot;#Networking&quot; class=&quot;headerlink&quot; title=&quot;Networking&quot;&gt;&lt;/a&gt;Networking&lt;/h2&gt;&lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="browser caching" scheme="http://kingsamchen.github.io/tags/browser-caching/"/>
    
      <category term="cors" scheme="http://kingsamchen.github.io/tags/cors/"/>
    
      <category term="docker" scheme="http://kingsamchen.github.io/tags/docker/"/>
    
      <category term="monorepo" scheme="http://kingsamchen.github.io/tags/monorepo/"/>
    
      <category term="spurious wakeup" scheme="http://kingsamchen.github.io/tags/spurious-wakeup/"/>
    
  </entry>
  
  <entry>
    <title>socks4a 协议代理</title>
    <link href="http://kingsamchen.github.io/2019/03/24/on-socks4a-proxy-implementation/"/>
    <id>http://kingsamchen.github.io/2019/03/24/on-socks4a-proxy-implementation/</id>
    <published>2019-03-24T12:07:03.000Z</published>
    <updated>2019-03-24T12:42:05.458Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;对于网络编程学习而言，尝试实现一个 proxy 是一个很好的途径。因为一个 proxy 对于 clients 来说是 server，对 remote servers 来说又是
        
      
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="proxy" scheme="http://kingsamchen.github.io/tags/proxy/"/>
    
      <category term="socks4a" scheme="http://kingsamchen.github.io/tags/socks4a/"/>
    
      <category term="socks" scheme="http://kingsamchen.github.io/tags/socks/"/>
    
  </entry>
  
  <entry>
    <title>推荐 Google API Design Guide</title>
    <link href="http://kingsamchen.github.io/2019/03/13/recommend-google-api-design-guide/"/>
    <id>http://kingsamchen.github.io/2019/03/13/recommend-google-api-design-guide/</id>
    <published>2019-03-12T16:21:25.000Z</published>
    <updated>2019-03-16T02:10:26.888Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://cloud.google.com/apis/design/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google API Design Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本上 可以看作是 Google 开放的
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="api design" scheme="http://kingsamchen.github.io/tags/api-design/"/>
    
      <category term="restful" scheme="http://kingsamchen.github.io/tags/restful/"/>
    
      <category term="grpc" scheme="http://kingsamchen.github.io/tags/grpc/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in Feb 2019</title>
    <link href="http://kingsamchen.github.io/2019/03/02/monthly-read-posts-in-feb-2019/"/>
    <id>http://kingsamchen.github.io/2019/03/02/monthly-read-posts-in-feb-2019/</id>
    <published>2019-03-02T07:46:47.000Z</published>
    <updated>2019-03-16T02:10:26.887Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Network&quot;&gt;&lt;a href=&quot;#Network&quot; class=&quot;headerlink&quot; title=&quot;Network&quot;&gt;&lt;/a&gt;Network&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.mnot.net/blog/2018/11/27/header_compression&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Designing Headers for HTTP Compression&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看起来是 HTTP/2 的 header compression 使用建议&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.mnot.net/blog/2017/05/11/status_codes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How to Think About HTTP Status Codes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP status codes 使用建议。&lt;/p&gt;
&lt;p&gt;适合结合 Rest API design 相关文章一起食用。&lt;/p&gt;
&lt;h2 id=&quot;Programming-Languages&quot;&gt;&lt;a href=&quot;#Programming-Languages&quot; class=&quot;headerlink&quot; title=&quot;Programming Languages&quot;&gt;&lt;/a&gt;Programming Languages&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://tonybai.com/2016/12/21/how-to-use-timer-reset-in-golang-correctly/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;论golang Timer Reset方法使用的正确姿势&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;golang 这破 timer 坑真多&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://jonasdevlieghere.com/guaranteed-copy-elision/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Guaranteed Copy Elision&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C++ 17 Guaranteed copy elision explained.&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="http" scheme="http://kingsamchen.github.io/tags/http/"/>
    
      <category term="http2" scheme="http://kingsamchen.github.io/tags/http2/"/>
    
      <category term="goroutine" scheme="http://kingsamchen.github.io/tags/goroutine/"/>
    
      <category term="database" scheme="http://kingsamchen.github.io/tags/database/"/>
    
      <category term="code review" scheme="http://kingsamchen.github.io/tags/code-review/"/>
    
      <category term="unicode" scheme="http://kingsamchen.github.io/tags/unicode/"/>
    
  </entry>
  
  <entry>
    <title>在 Linux 上使用深信服 VPN</title>
    <link href="http://kingsamchen.github.io/2019/02/23/using-sangfor-vpn-on-linux/"/>
    <id>http://kingsamchen.github.io/2019/02/23/using-sangfor-vpn-on-linux/</id>
    <published>2019-02-23T12:26:29.000Z</published>
    <updated>2019-02-23T13:57:51.394Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;因为公司使用 Windows 和 MacOS 的人最多，因此导致两个后果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连接公司内网需要使用的深信服 VPN 基本只支持 Windows 和 MacOS&lt;/li&gt;
&lt;li&gt;后端 golang 大仓代码基本只能在 MacOS 或者 Linux 上提交和调试&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;求一下交集可以发现，在贵司使用 Linux 作为开发平台的同学应该很难过。很不幸的是，我刚好属于那种在 Linux (虚拟机里跑 Mint) 上写后端服务的人。&lt;/p&gt;
&lt;p&gt;公司买的深信服的 VPN 服务，那个客户端虽然官方宣称支持 ubuntu，但是事实是压根不能用，连接成功后一旦有数据包就自动断开。&lt;/p&gt;
&lt;p&gt;官方论坛有人反映过类似的问题，得到的回答千篇一律都是推荐使用 Windows 和 MacOS。&lt;/p&gt;
&lt;p&gt;然而让我使用屎一样的 MacOS 是不可能的；让我在自己的主力台式机的 Windows 上装深信服的客户端也是不可能的。&lt;br&gt;
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="linux" scheme="http://kingsamchen.github.io/tags/linux/"/>
    
      <category term="vpn" scheme="http://kingsamchen.github.io/tags/vpn/"/>
    
      <category term="深信服" scheme="http://kingsamchen.github.io/tags/%E6%B7%B1%E4%BF%A1%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>C++ 工程依赖管理新方向：CMake &amp; Git</title>
    <link href="http://kingsamchen.github.io/2019/02/10/use-cmake-and-git-as-your-cpp-dependency-manager/"/>
    <id>http://kingsamchen.github.io/2019/02/10/use-cmake-and-git-as-your-cpp-dependency-manager/</id>
    <published>2019-02-10T06:52:21.000Z</published>
    <updated>2019-02-10T12:49:50.720Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文内容中提及的 CMake 均指提倡 target-based properties 的 &lt;a href=&quot;https://kingsamchen.github.io/2018/06/19/modern-cmake/&quot;&gt;modern cmake&lt;/a&gt;，而非史前版本的 legacy cmake。&lt;/p&gt;
&lt;h3 id=&quot;The-Right-Way-源码依赖&quot;&gt;&lt;a href=&quot;#The-Right-Way-源码依赖&quot; class=&quot;headerlink&quot; title=&quot;The Right Way: 源码依赖&quot;&gt;&lt;/a&gt;The Right Way: 源码依赖&lt;/h3&gt;&lt;p&gt;对于 C++ 工程而言，只要 ABI 的问题还存在，源码依赖就是最稳妥最普适最可靠的依赖引入方式；即使这些引入的源码在构建中会单独编译成（动/静态）库。&lt;/p&gt;
&lt;p&gt;同时，GitHub 成为开源文化社区的标杆后，获取实现了某一功能的第三方库的源代码的难度大大降低。&lt;/p&gt;
&lt;p&gt;因此个人倾向上：只要允许，都应该以特定版本的源码引入的方式去依赖一个第三方库。&lt;/p&gt;
&lt;p&gt;事实上，Google Facebook 这些大厂内部实行的 monorepo 也是源码依赖的一种实现方式，因为某个工程需要的依赖源码都可以一并获取到。&lt;/p&gt;
&lt;p&gt;在使用 CMake 作为构建系统的工程体系下，要以源码依赖的方式添加一个子工程只需要使用 &lt;code&gt;add_subdirectory()&lt;/code&gt; 添加目标工程的顶层目录（根 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 所在的目录）。&lt;/p&gt;
&lt;h3 id=&quot;Git-Submodule-一次不完美的尝试&quot;&gt;&lt;a href=&quot;#Git-Submodule-一次不完美的尝试&quot; class=&quot;headerlink&quot; title=&quot;Git Submodule: 一次不完美的尝试&quot;&gt;&lt;/a&gt;Git Submodule: 一次不完美的尝试&lt;/h3&gt;&lt;p&gt;我的个人项目 KBase 和 ezio，在此之前都是通过 git submodule 的方式引入自己需要的依赖源代码，然后通过&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 子工程添加到解决方案（Windows 平台）&lt;/li&gt;
&lt;li&gt;CMake &lt;code&gt;add_subdirectory()&lt;/code&gt; 建联（*nix 平台）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依赖的版本管理直接复用 submodule 提供的特性。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="cmake" scheme="http://kingsamchen.github.io/tags/cmake/"/>
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="git" scheme="http://kingsamchen.github.io/tags/git/"/>
    
      <category term="dependency management" scheme="http://kingsamchen.github.io/tags/dependency-management/"/>
    
  </entry>
  
  <entry>
    <title>Monthly Read Posts in Jan 2019</title>
    <link href="http://kingsamchen.github.io/2019/02/06/monthly-read-posts-in-jan-2019/"/>
    <id>http://kingsamchen.github.io/2019/02/06/monthly-read-posts-in-jan-2019/</id>
    <published>2019-02-06T11:32:23.000Z</published>
    <updated>2019-02-10T06:50:22.886Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Programming-Languages&quot;&gt;&lt;a href=&quot;#Programming-Languages&quot; class=&quot;headerlink&quot; title=&quot;Programming Languages&quot;&gt;&lt;/a&gt;Programming
        
      
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="c++" scheme="http://kingsamchen.github.io/tags/c/"/>
    
      <category term="linux" scheme="http://kingsamchen.github.io/tags/linux/"/>
    
      <category term="performance" scheme="http://kingsamchen.github.io/tags/performance/"/>
    
      <category term="allocator" scheme="http://kingsamchen.github.io/tags/allocator/"/>
    
      <category term="spinlock" scheme="http://kingsamchen.github.io/tags/spinlock/"/>
    
      <category term="ptrace" scheme="http://kingsamchen.github.io/tags/ptrace/"/>
    
  </entry>
  
  <entry>
    <title>调整 ezio 的 TCPConnection 状态事件</title>
    <link href="http://kingsamchen.github.io/2019/01/27/made-changes-on-tcp-connection-events-for-ezio/"/>
    <id>http://kingsamchen.github.io/2019/01/27/made-changes-on-tcp-connection-events-for-ezio/</id>
    <published>2019-01-27T03:05:48.000Z</published>
    <updated>2019-01-27T06:28:10.584Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;上上周的时候给 ezio 做了一个&lt;a href=&quot;https://github.com/kingsamchen/ezio/commit/d9e7bde28155b5bb2f144dd4c42083d95ef7b674&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;调整&lt;/a&gt;，稍微修改了一下 &lt;code&gt;TCPConnection&lt;/code&gt; 对外暴露的几个状态变化的事件。&lt;/p&gt;
&lt;p&gt;起因是在写 &lt;a href=&quot;https://github.com/kingsamchen/ezio/blob/9a2ea3ffa43578555e8dfcfe769db10bb45e0087/examples/chat/chat_client.cpp#L62&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;example/chat-client&lt;/a&gt; 的时候，因为主线程单独跑了一个事件循环从 &lt;code&gt;stdin&lt;/code&gt; 中读取用户输入，所以 &lt;code&gt;ChatClient&lt;/code&gt; 以及内部的 &lt;code&gt;TCPClient&lt;/code&gt; 是跑在另外的工作线程上。&lt;/p&gt;
&lt;p&gt;因为那个时候 &lt;code&gt;TCPClient&lt;/code&gt; 之对外暴露了 connection 和 disconnection 的事件回调（这两个事件还统一成了一个 &lt;code&gt;on_connection()&lt;/code&gt;），所以自然选择在 disconnection 的时候进行退出主循环的操作。&lt;/p&gt;
&lt;p&gt;但是这个时候会出现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主循环结束后立马析构 &lt;code&gt;ChatClient&lt;/code&gt;，连同内部的 &lt;code&gt;TCPClient&lt;/code&gt; 一起销毁。因为这部分代码跑在主线程上，所以不会和工作线程有任何 coordination。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TCPClient&lt;/code&gt; 会在触发 &lt;code&gt;on_connection()&lt;/code&gt; 来表明连接断开后会继续做一些内部清理工作；然而因为前面已经将 &lt;code&gt;TCPClient&lt;/code&gt; 析构了，导致 UAF&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而当时为了解决这个问题，采用的 workaround 时，&lt;code&gt;ChatClient::OnConnection()&lt;/code&gt; 在发现连接断开后，通过 &lt;code&gt;RunTaskAfter()&lt;/code&gt; 的方式延后执行 &lt;code&gt;EventLoop::Quit()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这个做法非常丑陋而且不可靠。&lt;br&gt;
    
    </summary>
    
      <category term="PROGRAMMING" scheme="http://kingsamchen.github.io/categories/PROGRAMMING/"/>
    
    
      <category term="ezio" scheme="http://kingsamchen.github.io/tags/ezio/"/>
    
      <category term="tcp" scheme="http://kingsamchen.github.io/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>来一口 golang 做的玻璃渣</title>
    <link href="http://kingsamchen.github.io/2019/01/08/bad-smells-in-golang/"/>
    <id>http://kingsamchen.github.io/2019/01/08/bad-smells-in-golang/</id>
    <published>2019-01-08T14:35:57.000Z</published>
    <updated>2019-01-27T03:03:43.579Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;转到后端差不多也快三个月了，拿 golang 糊代码的时间算上自己平时写的一些练手 demo 加起来差不多也有一个月。&lt;/p&gt;
&lt;p&gt;这将近一个月的时间过来差不多能体会到 golang 的设计精髓，那就是：&lt;em&gt;simple &amp;amp; stupid, being convenient as the first class support&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;换句话说就是：短平快糙猛，满口玻璃渣，怎么方便怎么来。&lt;/p&gt;
&lt;p&gt;所以接下来不免俗地是吐槽 golang 设计的内容。&lt;/p&gt;
&lt;p&gt;吐槽不考虑 PLT 上的设计，纯粹从日常堆业务逻辑出发。毕竟理论的东西我一个鶸也不懂，且 golang 的设计目的就是方便应届毕业生快速堆业务代码。&lt;/p&gt;
&lt;p&gt;以下吐槽点的顺序为自己在实际中遇到的顺序逆序。&lt;/p&gt;
&lt;h3 id=&quot;Flaky-Goroutines&quot;&gt;&lt;a href=&quot;#Flaky-Goroutines&quot; class=&quot;headerlink&quot; title=&quot;Flaky Goroutines&quot;&gt;&lt;/a&gt;Flaky Goroutines&lt;/h3&gt;&lt;p&gt;golang 里起一个 goroutine 很方便，但是目前感觉 goroutine 太过于 flaky，有点飘。一旦没用 &lt;code&gt;chan struct{}&lt;/code&gt; 或者 &lt;code&gt;sync.WaitGroup&lt;/code&gt; ”固定好“，就总有一种这玩意儿是不是已经脱离自己手心的感觉。&lt;/p&gt;
&lt;p&gt;另外不知道是不是很多用 golang 的人之前都是 php / python 的背景，相当一部分人其实对 goroutine-safe 没有什么概念。不过严格来说这个不是 golang 自身的问题。&lt;/p&gt;
&lt;h3 id=&quot;Cannot-assign-to-fields-within-short-declaration-notation&quot;&gt;&lt;a href=&quot;#Cannot-assign-to-fields-within-short-declaration-notation&quot; class=&quot;headerlink&quot; title=&quot;Cannot assign to fields within short declaration notation&quot;&gt;&lt;/a&gt;Cannot assign to fields within short declaration notation&lt;/h3&gt;&lt;p&gt;代码段&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; err error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ok, err := foobar()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(ok)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是合法的，因为 &lt;code&gt;ok&lt;/code&gt; 之前并没有被定义，所以这里 &lt;code&gt;err&lt;/code&gt; 可以蹭着使用 &lt;code&gt;:=&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="CODE-LIFE" scheme="http://kingsamchen.github.io/categories/CODE-LIFE/"/>
    
    
      <category term="golang" scheme="http://kingsamchen.github.io/tags/golang/"/>
    
      <category term="rant" scheme="http://kingsamchen.github.io/tags/rant/"/>
    
  </entry>
  
</feed>
